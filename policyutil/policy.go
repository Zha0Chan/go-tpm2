// Copyright 2023 Canonical Ltd.
// Licensed under the LGPLv3 with static-linking exception.
// See LICENCE file for details.

package policyutil

import (
	"bytes"
	"crypto"
	"crypto/sha256"
	"errors"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unicode/utf8"

	"github.com/canonical/go-tpm2"
	"github.com/canonical/go-tpm2/mu"
)

var (
	// ErrMissingDigest is returned from [Policy.Execute] when a TPM2_PolicyCpHash or
	// TPM2_PolicyNameHash assertion is missing a digest for the selected session algorithm.
	ErrMissingDigest = errors.New("missing digest for session algorithm")
)

type (
	taskFn   func() error
	paramKey [sha256.Size]byte
)

func policyParamKey(authName tpm2.Name, policyRef tpm2.Nonce) paramKey {
	h := crypto.SHA256.New()
	h.Write(authName)
	h.Write(policyRef)

	var key paramKey
	copy(key[:], h.Sum(nil))
	return key
}

// PolicyTicket corresponds to a ticket generated from a TPM2_PolicySigned or TPM2_PolicySecret
// assertion and is returned by [Policy.Execute]. Generated tickets can be supplied to
// [Policy.Execute] in the future in order to satisfy these assertions as long as they haven't
// expired.
type PolicyTicket struct {
	AuthName  tpm2.Name    // The name of the auth object associated with the corresponding assertion
	PolicyRef tpm2.Nonce   // The policy ref of the corresponding assertion
	CpHash    tpm2.Digest  // The cpHash supplied to the assertion that generated this ticket
	Timeout   tpm2.Timeout // The timeout returned by the assertion that generated this ticket

	// Ticket is the actual ticket returned by the TPM for the assertion that generated this ticket.
	// The Tag field indicates whether this was generated by TPM2_PolicySigned or TPM2_PolicySecret.
	Ticket *tpm2.TkAuth
}

// PolicyError is returned from [Policy.Execute] and other methods when an error
// is encountered during some processing of a policy. It provides an indication of
// where an error occurred.
type PolicyError struct {
	Path string // the path of the branch at which the error occurred
	task string
	err  error
}

func (e *PolicyError) Error() string {
	branch := "root branch"
	if len(e.Path) > 0 {
		branch = "branch " + e.Path
	}
	return fmt.Sprintf("cannot run '%s' task in %s: %v", e.task, branch, e.err)
}

func (e *PolicyError) Unwrap() error {
	return e.err
}

// PolicyAuthorizationError is returned from [Policy.Execute] if the policy uses TPM2_PolicySecret
// and the associated object could not be authorized, or if the policy uses TPM2_PolicySigned
// and no or an invalid signed authorization was supplied.
type PolicyAuthorizationError struct {
	AuthName  tpm2.Name
	PolicyRef tpm2.Nonce
	err       error
}

func (e *PolicyAuthorizationError) Error() string {
	return fmt.Sprintf("cannot complete authorization with authName=%#x, policyRef=%#x: %v", e.AuthName, e.PolicyRef, e.err)
}

func (e *PolicyAuthorizationError) Unwrap() error {
	return e.err
}

// ResourceLoadError is returned from [Policy.Execute] if the policy required a resource that
// could not be loaded.
type ResourceLoadError struct {
	Name tpm2.Name
	err  error
}

func (e *ResourceLoadError) Error() string {
	return fmt.Sprintf("cannot load resource with name %#x: %v", e.Name, e.err)
}

func (e *ResourceLoadError) Unwrap() error {
	return e.err
}

type policyBranchName string

func (n policyBranchName) isValid() bool {
	if !utf8.ValidString(string(n)) {
		return false
	}
	if (len(n) > 0 && n[0] == '$') || n == "*" {
		return false
	}
	return true
}

func (n policyBranchName) Marshal(w io.Writer) error {
	if !n.isValid() {
		return errors.New("invalid name")
	}
	_, err := mu.MarshalToWriter(w, []byte(n))
	return err
}

func (n *policyBranchName) Unmarshal(r io.Reader) error {
	var b []byte
	if _, err := mu.UnmarshalFromReader(r, &b); err != nil {
		return err
	}
	name := policyBranchName(b)
	if !name.isValid() {
		return errors.New("invalid name")
	}
	*n = name
	return nil
}

type policyBranchPath string

func (p policyBranchPath) PopNextComponent() (next policyBranchPath, remaining policyBranchPath) {
	remaining = p
	for len(remaining) > 0 {
		s := strings.SplitN(string(remaining), "/", 2)
		remaining = ""
		if len(s) == 2 {
			remaining = policyBranchPath(s[1])
		}
		component := policyBranchPath(s[0])
		if len(component) > 0 {
			return component, remaining
		}
	}

	return "", ""
}

func (p policyBranchPath) Concat(path policyBranchPath) policyBranchPath {
	var pathElements []string
	if p != "" {
		pathElements = append(pathElements, string(p))
	}
	if path != "" {
		pathElements = append(pathElements, string(path))
	}
	return policyBranchPath(strings.Join(pathElements, "/"))
}

// PolicySessionUsage describes how a policy session will be used, and assists with
// automatically selecting branches where a policy has command context-specific branches.
type PolicySessionUsage struct {
	commandCode tpm2.CommandCode
	handles     []Named
	params      []interface{}
	nvHandle    tpm2.Handle
}

// NewPolicySessionUsage creates a new PolicySessionUsage.
func NewPolicySessionUsage(command tpm2.CommandCode, handles []Named, params ...interface{}) *PolicySessionUsage {
	return &PolicySessionUsage{
		commandCode: command,
		handles:     handles,
		params:      params,
	}
}

// WithNVHandle indicates that the policy session is being used to authorize a NV
// index with the specified handle. This will panic if handle is not a NV index.
func (u *PolicySessionUsage) WithNVHandle(handle tpm2.Handle) *PolicySessionUsage {
	if handle.Type() != tpm2.HandleTypeNVIndex {
		panic("invalid handle")
	}
	u.nvHandle = handle
	return u
}

// PolicyExecuteParams contains parameters that are useful for executing a policy.
type PolicyExecuteParams struct {
	SignedAuthorizations []*PolicySignedAuthorization // Authorizations for TPM2_PolicySigned assertions
	Tickets              []*PolicyTicket              // Tickets for TPM2_PolicySecret and TPM2_PolicySigned assertions

	// Usage describes how the executed policy will be used, and assists with
	// automatically selecting branches where a policy has command context-specific
	// branches.
	Usage *PolicySessionUsage

	// Path provides a way to explicitly select branches to execute. A path consists
	// of zero or more components separated by a '/' character, with each component
	// identifying a branch to select when a branch node is encountered during
	// execution. When a branch node is encountered, the selected sub-branch is
	// executed, before resuming execution in the original branch immediately after
	// the branch node.
	//
	// A component can either identify a branch by its name (if it has one), or it
	// can be a numeric identifier of the form "$[n]" which selects the branch at
	// index n.
	//
	// If a component is "**", then the policy execution will attempt to automatically
	// select an execution path for the sub-tree associated with the current branch
	// node, which includes choosing the immediate sub-branch and any additional
	// sub-branches for branch nodes encountered during its execution. Remaining path
	// components will be consumed for additional branch nodes in the current branch.
	// If a component is "*", then the policy execution will attempt to automatically
	// select an immediate sub-branch.
	//
	// If the path has insufficent components for the branch nodes encountered in a
	// policy, the policy execution will attempt to select an appropriate branch
	// automatically.
	Path string
}

// policyBranchPath uniquely identifies an execution path through the branches in a
// profile, with each branch selector component being separated by a '/' character. A
// branch selector selects a branch at a node, and a branch can either be selected by
// its name (if it has one), or a numeric identifier of the form "$[n]" which selects
// a branch at a node using its index.
//
// The component "$auto" enables autoselection for a node, where a branch will be selected
// automatically. This only works for branches containing TPM2_PolicyPCR assertions
// where the assertion parameters match the current PCR values.
type policyParams interface {
	signedAuthorization(authName tpm2.Name, policyRef tpm2.Nonce) *PolicySignedAuthorization
	ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket
}

type policyResources interface {
	LoadName(name tpm2.Name) (ResourceContext, *Policy, error)
	LoadExternal(public *tpm2.Public) (ResourceContext, error)
	LoadNV(public *tpm2.NVPublic) (tpm2.ResourceContext, *Policy, error)
	NewSession(nameAlg tpm2.HashAlgorithmId, sessionType tpm2.SessionType) (SessionContext, error)
	Authorize(resource tpm2.ResourceContext) error
}

type policyRunnerHelper interface {
	cpHash(cpHash *policyCpHashElement) error
	nameHash(nameHash *policyNameHashElement) error
	handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error
}

type policySessionContext interface {
	session() PolicySession
	params() policyParams
	resources() policyResources
	helper() policyRunnerHelper

	ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket
	addTicket(ticket *PolicyTicket)
}

type policyDeferredTask struct {
	taskName string
	fn       taskFn
}

func newDeferredTask(name string, fn taskFn) *policyDeferredTask {
	return &policyDeferredTask{
		taskName: name,
		fn:       fn,
	}
}

func (e *policyDeferredTask) name() string {
	return e.taskName
}

func (e *policyDeferredTask) run(context policySessionContext) error {
	return e.fn()
}

type policyRunnerTaskStack interface {
	pushTasks(tasks []policySessionTask)
	pushTask(name string, fn taskFn)
	pushElements(elements policyElements)
}

type policySessionTask interface {
	name() string
	run(context policySessionContext) error
}

type taggedHash struct {
	HashAlg tpm2.HashAlgorithmId
	Digest  tpm2.Digest
}

func (h taggedHash) Marshal(w io.Writer) error {
	ta := tpm2.MakeTaggedHash(h.HashAlg, h.Digest)
	_, err := mu.MarshalToWriter(w, ta)
	return err
}

func (h *taggedHash) Unmarshal(r io.Reader) error {
	var ta tpm2.TaggedHash
	if _, err := mu.UnmarshalFromReader(r, &ta); err != nil {
		return err
	}

	if ta.HashAlg != tpm2.HashAlgorithmNull && !ta.HashAlg.IsValid() {
		return errors.New("invalid digest algorithm")
	}

	*h = taggedHash{
		HashAlg: ta.HashAlg,
		Digest:  ta.Digest()}
	return nil
}

type taggedHashList []taggedHash

type policyNVElement struct {
	NvIndex   *tpm2.NVPublic
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

func (*policyNVElement) name() string { return "TPM2_PolicyNV assertion" }

func (e *policyNVElement) run(context policySessionContext) error {
	nvIndex, policy, err := context.resources().LoadNV(e.NvIndex)
	if err != nil {
		return fmt.Errorf("cannot create nvIndex context: %w", err)
	}

	var auth ResourceContext = newResourceContextNonFlushable(nvIndex)
	switch {
	default:
	case e.NvIndex.Attrs&tpm2.AttrNVAuthRead != 0:
		policy = nil
	case e.NvIndex.Attrs&tpm2.AttrNVOwnerRead != 0:
		auth, policy, err = context.resources().LoadName(tpm2.MakeHandleName(tpm2.HandleOwner))
	case e.NvIndex.Attrs&tpm2.AttrNVPPRead != 0:
		auth, policy, err = context.resources().LoadName(tpm2.MakeHandleName(tpm2.HandlePlatform))
	}
	if err != nil {
		return fmt.Errorf("cannot create auth context: %w", err)
	}
	if policy != nil {
		return errors.New("unsupported auth method")
	}

	session, err := context.resources().NewSession(auth.Resource().Name().Algorithm(), tpm2.SessionTypeHMAC)
	if err != nil {
		return fmt.Errorf("cannot create session to authorize auth object: %w", err)
	}
	defer func() {
		if session == nil {
			return
		}
		session.Close()
	}()

	if err := context.resources().Authorize(auth.Resource()); err != nil {
		return fmt.Errorf("cannot authorize auth object: %w", err)
	}

	var tpmSession tpm2.SessionContext
	if session != nil {
		tpmSession = session.Session()
	}

	return context.session().PolicyNV(auth.Resource(), nvIndex, e.OperandB, e.Offset, e.Operation, tpmSession)
}

type policySecretElement struct {
	AuthObjectName tpm2.Name
	PolicyRef      tpm2.Nonce
}

func (*policySecretElement) name() string { return "TPM2_PolicySecret assertion" }

func (e *policySecretElement) run(context policySessionContext) error {
	if ticket := context.ticket(e.AuthObjectName, e.PolicyRef); ticket != nil {
		err := context.session().PolicyTicket(ticket.Timeout, ticket.CpHash, ticket.PolicyRef, ticket.AuthName, ticket.Ticket)
		switch {
		case tpm2.IsTPMParameterError(err, tpm2.ErrorExpired, tpm2.CommandPolicyTicket, 1):
			// The ticket has expired - ignore this and fall through to PolicySecret
		case tpm2.IsTPMParameterError(err, tpm2.ErrorTicket, tpm2.CommandPolicyTicket, 5):
			// The ticket is invalid - ignore this and fall through to PolicySecret
		case err != nil:
			return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: err}
		default:
			// The ticket was accepted
			return nil
		}
	}

	authObject, policy, err := context.resources().LoadName(e.AuthObjectName)
	if err != nil {
		return &ResourceLoadError{Name: e.AuthObjectName, err: err}
	}
	defer func() {
		if authObject.Resource().Handle().Type() != tpm2.HandleTypeTransient {
			return
		}
		authObject.Flush()
	}()
	if policy != nil {
		return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: errors.New("unsupported auth method")}
	}

	session, err := context.resources().NewSession(e.AuthObjectName.Algorithm(), tpm2.SessionTypeHMAC)
	if err != nil {
		return &PolicyAuthorizationError{
			AuthName:  e.AuthObjectName,
			PolicyRef: e.PolicyRef,
			err:       fmt.Errorf("cannot create session to authorize auth object: %w", err)}
	}
	defer func() {
		if session == nil {
			return
		}
		session.Close()
	}()

	if err := context.resources().Authorize(authObject.Resource()); err != nil {
		return &PolicyAuthorizationError{
			AuthName:  e.AuthObjectName,
			PolicyRef: e.PolicyRef,
			err:       fmt.Errorf("cannot authorize auth object: %w", err)}
	}

	var tpmSession tpm2.SessionContext
	if session != nil {
		tpmSession = session.Session()
	}

	timeout, ticket, err := context.session().PolicySecret(authObject.Resource(), nil, e.PolicyRef, 0, tpmSession)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: err}
	}

	context.addTicket(&PolicyTicket{
		AuthName:  e.AuthObjectName,
		PolicyRef: e.PolicyRef,
		CpHash:    nil,
		Timeout:   timeout,
		Ticket:    ticket})
	return nil
}

type policySignedElement struct {
	AuthKey   *tpm2.Public
	PolicyRef tpm2.Nonce
}

func (*policySignedElement) name() string { return "TPM2_PolicySigned assertion" }

func (e *policySignedElement) run(context policySessionContext) error {
	authKeyName := e.AuthKey.Name()
	if !authKeyName.IsValid() {
		return errors.New("invalid auth key name")
	}

	if ticket := context.ticket(authKeyName, e.PolicyRef); ticket != nil {
		err := context.session().PolicyTicket(ticket.Timeout, ticket.CpHash, ticket.PolicyRef, ticket.AuthName, ticket.Ticket)
		switch {
		case tpm2.IsTPMParameterError(err, tpm2.ErrorExpired, tpm2.CommandPolicyTicket, 1):
			// The ticket has expired - ignore this and fall through to PolicySigned
		case tpm2.IsTPMParameterError(err, tpm2.ErrorTicket, tpm2.CommandPolicyTicket, 5):
			// The ticket is invalid - ignore this and fall through to PolicySigned
		case err != nil:
			return &PolicyAuthorizationError{AuthName: authKeyName, PolicyRef: e.PolicyRef, err: err}
		default:
			// The ticket was accepted
			return nil
		}
	}

	auth := context.params().signedAuthorization(authKeyName, e.PolicyRef)
	if auth == nil {
		return &PolicyAuthorizationError{
			AuthName:  authKeyName,
			PolicyRef: e.PolicyRef,
			err:       errors.New("missing signed authorization"),
		}
	}

	authKey, err := context.resources().LoadExternal(e.AuthKey)
	if err != nil {
		return fmt.Errorf("cannot create authKey context: %w", err)
	}
	defer authKey.Flush()

	includeNonceTPM := false
	if len(auth.NonceTPM) > 0 {
		includeNonceTPM = true
	}

	timeout, ticket, err := context.session().PolicySigned(authKey.Resource(), includeNonceTPM, auth.CpHash, e.PolicyRef, auth.Expiration, auth.Authorization.Signature)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: authKeyName, PolicyRef: e.PolicyRef, err: err}
	}

	context.addTicket(&PolicyTicket{
		AuthName:  authKeyName,
		PolicyRef: e.PolicyRef,
		CpHash:    auth.CpHash,
		Timeout:   timeout,
		Ticket:    ticket})
	return nil
}

type policyAuthValueElement struct{}

func (*policyAuthValueElement) name() string { return "TPM2_PolicyAuthValue assertion" }

func (*policyAuthValueElement) run(context policySessionContext) error {
	return context.session().PolicyAuthValue()
}

type policyCommandCodeElement struct {
	CommandCode tpm2.CommandCode
}

func (*policyCommandCodeElement) name() string { return "TPM2_PolicyCommandCode assertion" }

func (e *policyCommandCodeElement) run(context policySessionContext) error {
	return context.session().PolicyCommandCode(e.CommandCode)
}

type policyCounterTimerElement struct {
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

func (*policyCounterTimerElement) name() string { return "TPM2_PolicyCounterTimer assertion" }

func (e *policyCounterTimerElement) run(context policySessionContext) error {
	return context.session().PolicyCounterTimer(e.OperandB, e.Offset, e.Operation)
}

type policyCpHashElement struct {
	CommandCode tpm2.CommandCode
	Handles     []tpm2.Name
	CpBytes     []byte

	Digest tpm2.Digest
}

func (*policyCpHashElement) name() string { return "TPM2_PolicyCpHash assertion" }

func (e *policyCpHashElement) run(context policySessionContext) error {
	if err := context.helper().cpHash(e); err != nil {
		return err
	}
	return context.session().PolicyCpHash(e.Digest)
}

type policyNameHashElement struct {
	Handles []tpm2.Name

	Digest tpm2.Digest
}

func (*policyNameHashElement) name() string { return "TPM2_PolicyNameHash assertion" }

func (e *policyNameHashElement) run(context policySessionContext) error {
	if err := context.helper().nameHash(e); err != nil {
		return err
	}
	return context.session().PolicyNameHash(e.Digest)
}

type policyBranch struct {
	Name          policyBranchName
	PolicyDigests taggedHashList
	Policy        policyElements
}

type policyBranches []*policyBranch

type policyORElement struct {
	Branches policyBranches
}

func (*policyORElement) name() string { return "branch node" }

func (e *policyORElement) run(context policySessionContext) error {
	return context.helper().handleBranches(e.Branches, func(digests tpm2.DigestList, selected int) error {
		tree, err := newPolicyOrTree(context.session().HashAlg(), digests)
		if err != nil {
			return fmt.Errorf("cannot compute PolicyOR tree: %w", err)
		}

		pHashLists := tree.selectBranch(selected)

		for _, pHashList := range pHashLists {
			if err := context.session().PolicyOR(pHashList); err != nil {
				return err
			}
		}
		return nil
	})
}

type pcrValue struct {
	PCR    tpm2.Handle
	Digest taggedHash
}

type pcrValueList []pcrValue

type policyPCRElement struct {
	PCRs pcrValueList
}

func (*policyPCRElement) name() string { return "TPM2_PolicyPCR assertion" }

func (e *policyPCRElement) run(context policySessionContext) error {
	values, err := e.pcrValues()
	if err != nil {
		return err
	}
	pcrs, pcrDigest, err := ComputePCRDigestFromAllValues(context.session().HashAlg(), values)
	if err != nil {
		return fmt.Errorf("cannot compute PCR digest: %w", err)
	}
	return context.session().PolicyPCR(pcrDigest, pcrs)
}

func (e *policyPCRElement) pcrValues() (tpm2.PCRValues, error) {
	values := make(tpm2.PCRValues)
	for i, value := range e.PCRs {
		if value.PCR.Type() != tpm2.HandleTypePCR {
			return nil, fmt.Errorf("invalid PCR handle at index %d", i)
		}
		if err := values.SetValue(value.Digest.HashAlg, int(value.PCR), value.Digest.Digest); err != nil {
			return nil, fmt.Errorf("invalid PCR value at index %d: %w", i, err)
		}
	}
	return values, nil
}

type policyDuplicationSelectElement struct {
	Object        tpm2.Name
	NewParent     tpm2.Name
	IncludeObject bool
}

func (*policyDuplicationSelectElement) name() string { return "TPM2_PolicyDuplicationSelect assertion" }

func (e *policyDuplicationSelectElement) run(context policySessionContext) error {
	return context.session().PolicyDuplicationSelect(e.Object, e.NewParent, e.IncludeObject)
}

type policyPasswordElement struct{}

func (*policyPasswordElement) name() string { return "TPM2_PolicyPassword assertion" }

func (*policyPasswordElement) run(context policySessionContext) error {
	return context.session().PolicyPassword()
}

type policyNvWrittenElement struct {
	WrittenSet bool
}

func (*policyNvWrittenElement) name() string { return "TPM2_PolicyNvWritten assertion" }

func (e *policyNvWrittenElement) run(context policySessionContext) error {
	return context.session().PolicyNvWritten(e.WrittenSet)
}

type policyElementDetails struct {
	NV                *policyNVElement
	Secret            *policySecretElement
	Signed            *policySignedElement
	AuthValue         *policyAuthValueElement
	CommandCode       *policyCommandCodeElement
	CounterTimer      *policyCounterTimerElement
	CpHash            *policyCpHashElement
	NameHash          *policyNameHashElement
	OR                *policyORElement
	PCR               *policyPCRElement
	DuplicationSelect *policyDuplicationSelectElement
	Password          *policyPasswordElement
	NvWritten         *policyNvWrittenElement
}

func (d *policyElementDetails) Select(selector reflect.Value) interface{} {
	switch selector.Interface().(tpm2.CommandCode) {
	case tpm2.CommandPolicyNV:
		return &d.NV
	case tpm2.CommandPolicySecret:
		return &d.Secret
	case tpm2.CommandPolicySigned:
		return &d.Signed
	case tpm2.CommandPolicyAuthValue:
		return &d.AuthValue
	case tpm2.CommandPolicyCommandCode:
		return &d.CommandCode
	case tpm2.CommandPolicyCounterTimer:
		return &d.CounterTimer
	case tpm2.CommandPolicyCpHash:
		return &d.CpHash
	case tpm2.CommandPolicyNameHash:
		return &d.NameHash
	case tpm2.CommandPolicyOR:
		return &d.OR
	case tpm2.CommandPolicyPCR:
		return &d.PCR
	case tpm2.CommandPolicyDuplicationSelect:
		return &d.DuplicationSelect
	case tpm2.CommandPolicyPassword:
		return &d.Password
	case tpm2.CommandPolicyNvWritten:
		return &d.NvWritten
	default:
		return nil
	}
}

type policyElement struct {
	Type    tpm2.CommandCode
	Details *policyElementDetails
}

func (e *policyElement) runner() policySessionTask {
	switch e.Type {
	case tpm2.CommandPolicyNV:
		return e.Details.NV
	case tpm2.CommandPolicySecret:
		return e.Details.Secret
	case tpm2.CommandPolicySigned:
		return e.Details.Signed
	case tpm2.CommandPolicyAuthValue:
		return e.Details.AuthValue
	case tpm2.CommandPolicyCommandCode:
		return e.Details.CommandCode
	case tpm2.CommandPolicyCounterTimer:
		return e.Details.CounterTimer
	case tpm2.CommandPolicyCpHash:
		return e.Details.CpHash
	case tpm2.CommandPolicyNameHash:
		return e.Details.NameHash
	case tpm2.CommandPolicyOR:
		return e.Details.OR
	case tpm2.CommandPolicyPCR:
		return e.Details.PCR
	case tpm2.CommandPolicyDuplicationSelect:
		return e.Details.DuplicationSelect
	case tpm2.CommandPolicyPassword:
		return e.Details.Password
	case tpm2.CommandPolicyNvWritten:
		return e.Details.NvWritten
	default:
		panic("invalid type")
	}
}

func (e *policyElement) name() string {
	return e.runner().name()
}

func (e *policyElement) run(context policySessionContext) error {
	return e.runner().run(context)
}

type policyElements []*policyElement

type policy struct {
	PolicyDigests taggedHashList
	Policy        policyElements
}

// Policy corresponds to an authorization policy. It can be serialized with
// [github.com/canonical/go-tpm2/mu].
type Policy struct {
	policy policy
}

// Marshal implements [mu.CustomMarshaller.Marshal].
func (p Policy) Marshal(w io.Writer) error {
	_, err := mu.MarshalToWriter(w, p.policy)
	return err
}

// Unmarshal implements [mu.CustomMarshaller.Unarshal].
func (p *Policy) Unmarshal(r io.Reader) error {
	_, err := mu.UnmarshalFromReader(r, &p.policy)
	return err
}

type policyRunner struct {
	policySession      PolicySession
	policyParams       policyParams
	policyResources    policyResources
	policyRunnerHelper policyRunnerHelper

	tickets     map[paramKey]*PolicyTicket
	currentPath policyBranchPath

	tasks []policySessionTask
}

func newPolicyRunner(session PolicySession, params policyParams, resources policyResources, newHelperFn func(*policyRunner) policyRunnerHelper) *policyRunner {
	out := &policyRunner{
		policySession:   session,
		policyParams:    params,
		policyResources: resources,
		tickets:         make(map[paramKey]*PolicyTicket),
	}
	out.policyRunnerHelper = newHelperFn(out)
	return out
}

func (r *policyRunner) session() PolicySession {
	return r.policySession
}

func (r *policyRunner) params() policyParams {
	return r.policyParams
}

func (r *policyRunner) resources() policyResources {
	return r.policyResources
}

func (r *policyRunner) helper() policyRunnerHelper {
	return r.policyRunnerHelper
}

func (r *policyRunner) ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket {
	if ticket, exists := r.tickets[policyParamKey(authName, policyRef)]; exists {
		return ticket
	}
	return r.policyParams.ticket(authName, policyRef)
}

func (r *policyRunner) addTicket(ticket *PolicyTicket) {
	if ticket.Ticket == nil || (ticket.Ticket.Hierarchy == tpm2.HandleNull && len(ticket.Ticket.Digest) == 0) {
		// skip null tickets
		return
	}
	r.tickets[policyParamKey(ticket.AuthName, ticket.PolicyRef)] = ticket
}

func (r *policyRunner) pushTasks(tasks []policySessionTask) {
	r.tasks = append(tasks, r.tasks...)
}

func (r *policyRunner) pushTask(name string, fn taskFn) {
	r.tasks = append([]policySessionTask{newDeferredTask(name, fn)}, r.tasks...)
}

func (r *policyRunner) pushElements(elements policyElements) {
	var tasks []policySessionTask
	for _, element := range elements {
		tasks = append(tasks, element)
	}
	r.pushTasks(tasks)
}

func (r *policyRunner) overrideSession(session PolicySession) (restore func()) {
	orig := r.policySession
	r.policySession = session
	return func() {
		r.policySession = orig
	}
}

func (r *policyRunner) overrideParams(params policyParams) (restore func()) {
	orig := r.policyParams
	r.policyParams = params
	return func() {
		r.policyParams = orig
	}
}

func (r *policyRunner) overrideResources(resources policyResources) (restore func()) {
	orig := r.policyResources
	r.policyResources = resources
	return func() {
		r.policyResources = orig
	}
}

func (r *policyRunner) overrideHelper(helper policyRunnerHelper) (restore func()) {
	orig := r.policyRunnerHelper
	r.policyRunnerHelper = helper
	return func() {
		r.policyRunnerHelper = orig
	}
}

func (r *policyRunner) more() bool {
	return len(r.tasks) > 0
}

func (r *policyRunner) popTask() policySessionTask {
	task := r.tasks[0]
	r.tasks = r.tasks[1:]
	return task
}

func (r *policyRunner) run(policy policyElements) error {
	r.pushElements(policy)

	for r.more() {
		task := r.popTask()
		if err := task.run(r); err != nil {
			return &PolicyError{Path: string(r.currentPath), task: task.name(), err: err}
		}
	}

	return nil
}

// executePolicyParams is an implementation of policyParams that provides real
// parameters.
type executePolicyParams struct {
	authorizations map[paramKey]*PolicySignedAuthorization
	tickets        map[paramKey]*PolicyTicket
}

func newExecutePolicyParams(params *PolicyExecuteParams) *executePolicyParams {
	out := &executePolicyParams{
		authorizations: make(map[paramKey]*PolicySignedAuthorization),
		tickets:        make(map[paramKey]*PolicyTicket),
	}
	for _, auth := range params.SignedAuthorizations {
		if auth.Authorization == nil {
			continue
		}
		out.authorizations[policyParamKey(auth.Authorization.AuthKey.Name(), auth.Authorization.PolicyRef)] = auth
	}
	for _, ticket := range params.Tickets {
		out.tickets[policyParamKey(ticket.AuthName, ticket.PolicyRef)] = ticket
	}

	return out
}

func (p *executePolicyParams) signedAuthorization(authName tpm2.Name, policyRef tpm2.Nonce) *PolicySignedAuthorization {
	return p.authorizations[policyParamKey(authName, policyRef)]
}

func (p *executePolicyParams) ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket {
	return p.tickets[policyParamKey(authName, policyRef)]
}

type tpmState interface {
	PCRValues(pcrs tpm2.PCRSelectionList) (tpm2.PCRValues, error)
	NVPublic(handle tpm2.Handle) (*tpm2.NVPublic, error)
	ReadClock() (*tpm2.TimeInfo, error)
}

type executePolicyHelper struct {
	policyBranchSelectMixin
	runner    *policyRunner
	state     tpmState
	remaining policyBranchPath
	usage     *PolicySessionUsage
}

func newExecutePolicyHelper(runner *policyRunner, state tpmState, params *PolicyExecuteParams) *executePolicyHelper {
	return &executePolicyHelper{
		runner:    runner,
		state:     state,
		remaining: policyBranchPath(params.Path),
		usage:     params.Usage,
	}
}

func (h *executePolicyHelper) cpHash(cpHash *policyCpHashElement) error {
	return nil
}

func (h *executePolicyHelper) nameHash(nameHash *policyNameHashElement) error {
	return nil
}

func (h *executePolicyHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	next, remaining := h.remaining.PopNextComponent()
	if len(next) == 0 || next[0] == '*' {
		// There are no more components or the next component is a wildcard match - build a
		// list of candidate paths for this subtree
		filter := newPolicyBranchFilter(h.runner, h.state, h.usage)
		return filter.filterBranches(branches, func(candidates []candidateBranch) error {
			if len(candidates) == 0 {
				return errors.New("cannot select branch: no appropriate branches")
			}

			// Prefer paths without TPM2_PolicyAuthValue, TPM2_PolicyPassword, TPM2_PolicySecret
			// and TPM2_PolicyNV assertions.
			path := candidates[0].path
			for _, candidate := range candidates {
				if !candidate.details.AuthValueNeeded && len(candidate.details.Secret) == 0 && len(candidate.details.NV) == 0 {
					path = candidate.path
					break
				}
			}
			switch next {
			case "":
				// We have a path for this whole subtree
				h.remaining = path
			case "**":
				// Prepend the path for this whole subtree to the remaining components
				h.remaining = path.Concat(remaining)
			case "*":
				// Prepend the first component of the path for this subtree to the remaining components
				component, _ := path.PopNextComponent()
				h.remaining = component.Concat(remaining)
			default:
				panic("not reached")
			}

			// rerun branch node
			h.runner.pushElements(policyElements{&policyElement{
				Type: tpm2.CommandPolicyOR,
				Details: &policyElementDetails{
					OR: &policyORElement{Branches: branches}}}})
			return nil
		})
	}

	// We have a branch selector
	h.remaining = remaining
	selected, err := h.selectBranch(branches, next)
	if err != nil {
		return err
	}

	// Obtain the branch digests
	var digests tpm2.DigestList
	for _, branch := range branches {
		found := false
		for _, digest := range branch.PolicyDigests {
			if digest.HashAlg != h.runner.session().HashAlg() {
				continue
			}

			digests = append(digests, digest.Digest)
			found = true
			break
		}
		if !found {
			return ErrMissingDigest
		}
	}

	// Run it!
	h.runner.pushTask("complete branch node", func() error {
		return complete(digests, selected)
	})
	h.runner.pushElements(branches[selected].Policy)
	h.runner.currentPath = h.runner.currentPath.Concat(next)

	return nil
}

// Execute runs this policy using the supplied TPM context and on the supplied policy session.
//
// The caller may supply additional parameters via the PolicyExecuteParams struct, which is an
// optional argument. This can contain parameters for TPM2_PolicySecret assertions, signed
// authorizations for TPM2_PolicySigned assertions, or tickets to satisfy TPM2_PolicySecret or
// TPM2_PolicySigned assertions. Each of these parameters are associated with a policy assertion
// by a name and policy reference.
//
// Resources required by a policy are obtained from the supplied PolicyExecuteHelper, which is
// optional but must be supplied for any policy that executes TPM2_PolicyNV, TPM2_PolicySecret or
// TPM2_PolicySigned assertions.
//
// The caller may explicitly select branches to execute via the Path argument of
// [PolicyExecuteParams]. Alternatively, if branches are not specified explicitly, an
// appropriate branch is selected automatically where possible. This works by selecting the
// first branch from all of the candidate branches, with a preference for branches that
// don't include TPM2_PolicySecret, TPM2_PolicyAuthValue and TPM2_PolicyPassword assertions.
// Branches are omitted from the set of candidate branches if any of the following conditions are
// true:
//   - It contains a command code, command parameter hash, or name hash that doesn't match
//     the supplied [PolicySessionUsage].
//   - It uses TPM2_PolicyNvWritten with a value that doesn't match the public area of the NV index
//     provided via the supplied [PolicySessionUsage].
//   - It uses TPM2_PolicySigned and there is no [PolicySignedAuthorization] or [PolicyTicket]
//     supplied. Note that if either of these are supplied, it is assumed that they will succeed.
//   - It uses TPM2_PolicyPCR with values that don't match the current PCR values.
//   - It uses TPM2_PolicyCounterTimer with conditions that will fail.
//
// Note that when automatically selecting branches, it is assumed that any TPM2_PolicySecret or
// TPM2_PolicyNV assertions will succeed.
//
// The supplied PolicyExecuteHelper is used to obtain current TPM state when determining which
// branches to execute. This is required for policies that include TPM2_PolicyPCR,
// TPM2_PolicyCounterTimer or TPM2_PolicyNvWritten assertions.
//
// On success, the supplied policy session may be used for authorization in a context that requires
// that this policy is satisfied. It will also return a list of tickets generated by any assertions,
// and indicate whether the authorization value must be supplied for the resource being authorized.
func (p *Policy) Execute(session PolicySession, helper PolicyExecuteHelper, params *PolicyExecuteParams) (tickets []*PolicyTicket, requireAuthValue bool, err error) {
	if session == nil {
		return nil, false, errors.New("no session")
	}
	if helper == nil {
		helper = new(nullPolicyExecuteHelper)
	}
	if params == nil {
		params = new(PolicyExecuteParams)
	}

	var details PolicyBranchDetails

	runner := newPolicyRunner(
		&observingPolicySession{session: session, details: &details},
		newExecutePolicyParams(params),
		helper,
		func(runner *policyRunner) policyRunnerHelper { return newExecutePolicyHelper(runner, helper, params) },
	)

	if err := runner.run(p.policy.Policy); err != nil {
		return nil, false, err
	}

	for _, ticket := range runner.tickets {
		tickets = append(tickets, ticket)
	}

	return tickets, details.AuthValueNeeded, nil
}

// mockPolicyParams is an implementation of policyParams that provides mock parameters
// to compute a policy.
type mockPolicyParams struct{}

func (p *mockPolicyParams) signedAuthorization(authName tpm2.Name, policyRef tpm2.Nonce) *PolicySignedAuthorization {
	return &PolicySignedAuthorization{Authorization: new(PolicyAuthorization)}
}

func (p *mockPolicyParams) ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket {
	return nil
}

func computeBranchDigests(runner *policyRunner, branches policyBranches, done func(tpm2.DigestList) error) error {
	currentDigest, err := runner.session().PolicyGetDigest()
	if err != nil {
		return err
	}

	currentPath := runner.currentPath

	var digests tpm2.DigestList

	var tasks []policySessionTask
	for i, branch := range branches {
		i := i
		branch := branch
		task := newDeferredTask("compute branch digest", func() error {
			digest := taggedHash{HashAlg: runner.session().HashAlg(), Digest: currentDigest}

			restoreSession := runner.overrideSession(newComputePolicySession(&digest))

			name := policyBranchPath(branch.Name)
			if len(name) == 0 {
				name = policyBranchPath(fmt.Sprintf("$[%d]", i))
			}
			runner.currentPath = currentPath.Concat(name)

			runner.pushTask("complete compute branch digest", func() error {
				runner.currentPath = currentPath
				restoreSession()
				digests = append(digests, digest.Digest)
				if len(digests) != len(branches) {
					return nil
				}

				runner.pushTask("complete compute branch digests", func() error {
					return done(digests)
				})
				return nil
			})
			runner.pushElements(branch.Policy)

			return nil
		})
		tasks = append(tasks, task)
	}
	runner.pushTasks(tasks)

	return nil
}

type computePolicyHelper struct {
	runner    *policyRunner
	hasCpHash *bool
}

func newComputePolicyHelper(runner *policyRunner, hasCpHash *bool) *computePolicyHelper {
	return &computePolicyHelper{
		runner:    runner,
		hasCpHash: hasCpHash,
	}
}

func (h *computePolicyHelper) cpHash(cpHash *policyCpHashElement) error {
	if h.hasCpHash != nil {
		*h.hasCpHash = true
	}
	digest, err := computeCpHash(h.runner.session().HashAlg(), cpHash.CommandCode, cpHash.Handles, cpHash.CpBytes)
	if err != nil {
		return fmt.Errorf("cannot compute cpHashA: %w", err)
	}
	cpHash.Digest = digest
	return nil
}

func (h *computePolicyHelper) nameHash(nameHash *policyNameHashElement) error {
	if h.hasCpHash != nil {
		*h.hasCpHash = true
	}
	digest, err := computeNameHash(h.runner.session().HashAlg(), nameHash.Handles)
	if err != nil {
		return fmt.Errorf("cannot compute nameHash: %w", err)
	}
	nameHash.Digest = digest
	return nil
}

func (h *computePolicyHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	if err := computeBranchDigests(h.runner, branches, func(digests tpm2.DigestList) error {
		for i, branch := range branches {
			found := false
			computedDigest := digests[i]
			for j, digest := range branch.PolicyDigests {
				if digest.HashAlg != h.runner.session().HashAlg() {
					continue
				}

				branch.PolicyDigests[j] = taggedHash{HashAlg: h.runner.session().HashAlg(), Digest: computedDigest}
				found = true
				break
			}
			if !found {
				branch.PolicyDigests = append(branch.PolicyDigests, taggedHash{HashAlg: h.runner.session().HashAlg(), Digest: computedDigest})
			}
		}

		h.runner.pushTask("complete branch node", func() error {
			return complete(digests, 0)
		})
		return nil
	}); err != nil {
		return fmt.Errorf("cannot compute branch digests: %w", err)
	}

	return nil
}

func (p *Policy) computeForDigest(digest *taggedHash) error {
	var policy *policy
	if err := mu.CopyValue(&policy, p.policy); err != nil {
		return fmt.Errorf("cannot make temporary copy of policy: %w", err)
	}

	var hasCpHash bool

	runner := newPolicyRunner(
		newComputePolicySession(digest),
		new(mockPolicyParams),
		new(mockResources),
		func(runner *policyRunner) policyRunnerHelper { return newComputePolicyHelper(runner, &hasCpHash) },
	)

	if err := runner.run(policy.Policy); err != nil {
		return err
	}

	addedDigest := false
	for i, d := range policy.PolicyDigests {
		if d.HashAlg == digest.HashAlg {
			policy.PolicyDigests[i] = *digest
			addedDigest = true
			break
		}
	}
	if !addedDigest {
		policy.PolicyDigests = append(policy.PolicyDigests, *digest)
	}

	if hasCpHash && len(policy.PolicyDigests) > 1 {
		return errors.New("policies that use TPM2_PolicyCpHash and TPM2_PolicyNameHash can't be computed for more than one digest algorithm")
	}

	p.policy = *policy
	return nil
}

// Compute computes the digest for this policy for the specified algorithm. This also
// updates stored digests within the policy, so the policy should be persisted after
// calling this. On success, it returns the computed digest.
//
// Policies that contain TPM2_PolicyCpHash or TPM2_PolicyNameHash assertions can only
// be computed for a single digest algorithm. An error will be returned if the policy has
// already been computed for another algorithm.
func (p *Policy) Compute(alg tpm2.HashAlgorithmId) (tpm2.Digest, error) {
	if !alg.IsValid() {
		return nil, errors.New("invalid algorithm")
	}

	for _, digest := range p.policy.PolicyDigests {
		if digest.HashAlg == alg {
			return digest.Digest, nil
		}
	}

	digest := taggedHash{HashAlg: alg, Digest: make(tpm2.Digest, alg.Size())}
	if err := p.computeForDigest(&digest); err != nil {
		return nil, err
	}

	return digest.Digest, nil
}

type validatePolicyHelper struct {
	runner *policyRunner
}

func newValidatePolicyHelper(runner *policyRunner) *validatePolicyHelper {
	return &validatePolicyHelper{runner: runner}
}

func (h *validatePolicyHelper) cpHash(cpHash *policyCpHashElement) error {
	digest, err := computeCpHash(h.runner.session().HashAlg(), cpHash.CommandCode, cpHash.Handles, cpHash.CpBytes)
	if err != nil {
		return fmt.Errorf("cannot compute cpHashA: %w", err)
	}
	if !bytes.Equal(digest, cpHash.Digest) {
		return fmt.Errorf("stored and computed cpHashA mismatch (computed: %x, stored: %x)", digest, cpHash.Digest)
	}
	return nil
}

func (h *validatePolicyHelper) nameHash(nameHash *policyNameHashElement) error {
	digest, err := computeNameHash(h.runner.session().HashAlg(), nameHash.Handles)
	if err != nil {
		return fmt.Errorf("cannot compute nameHash: %w", err)
	}
	if !bytes.Equal(digest, nameHash.Digest) {
		return fmt.Errorf("stored and computed nameHash mismatch (computed: %x, stored: %x)", digest, nameHash.Digest)
	}
	return nil
}

func (h *validatePolicyHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	if err := computeBranchDigests(h.runner, branches, func(digests tpm2.DigestList) error {
		for i, branch := range branches {
			found := false
			computedDigest := digests[i]
			for _, digest := range branch.PolicyDigests {
				if digest.HashAlg != h.runner.session().HashAlg() {
					continue
				}
				if !bytes.Equal(digest.Digest, computedDigest) {
					return fmt.Errorf("stored and computed branch digest mismatch (computed: %x, stored: %x)", computedDigest, digest.Digest)
				}
				found = true
				break
			}
			if !found {
				return ErrMissingDigest
			}
		}

		h.runner.pushTask("complete branch node", func() error {
			return complete(digests, 0)
		})
		return nil
	}); err != nil {
		return fmt.Errorf("cannot compute branch digests: %w", err)
	}

	return nil
}

// Validate performs some checking of every element in the policy, and
// verifies that every branch is consistent with their stored digests. On
// success, it returns the digest correpsonding to this policy for the
// specified digest algorithm.
func (p *Policy) Validate(alg tpm2.HashAlgorithmId) (tpm2.Digest, error) {
	var expectedDigest tpm2.Digest
	for _, digest := range p.policy.PolicyDigests {
		if digest.HashAlg != alg {
			continue
		}

		expectedDigest = digest.Digest
		break
	}
	if expectedDigest == nil {
		return nil, ErrMissingDigest
	}

	digest := &taggedHash{HashAlg: alg, Digest: make(tpm2.Digest, alg.Size())}

	runner := newPolicyRunner(
		newComputePolicySession(digest),
		new(mockPolicyParams),
		new(mockResources),
		func(runner *policyRunner) policyRunnerHelper { return newValidatePolicyHelper(runner) },
	)
	if err := runner.run(p.policy.Policy); err != nil {
		return nil, err
	}

	if !bytes.Equal(digest.Digest, expectedDigest) {
		return nil, fmt.Errorf("stored and computed policy digest mismatch (computed: %x, stored: %x)", digest.Digest, expectedDigest)
	}

	return expectedDigest, nil
}

type listBranchesResult struct {
	branches []string
}

type listBranchesHelper struct {
	runner *policyRunner
	result *listBranchesResult
}

func newListBranchesHelper(runner *policyRunner, result *listBranchesResult) *listBranchesHelper {
	return &listBranchesHelper{
		runner: runner,
		result: result,
	}
}

func (h *listBranchesHelper) cpHash(cpHash *policyCpHashElement) error {
	return nil
}

func (h *listBranchesHelper) nameHash(nameHash *policyNameHashElement) error {
	return nil
}

func (h *listBranchesHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	// we should only hit this once
	h.runner.overrideHelper(newTreeWalkerHelper(h.runner, treeWalkerModeRootTree, h.beginBranchNode, h.completeBranch))

	// re-run branch node
	h.runner.pushElements(policyElements{
		&policyElement{
			Type: tpm2.CommandPolicyOR,
			Details: &policyElementDetails{
				OR: &policyORElement{Branches: branches},
			},
		},
	})
	return nil
}

func (h *listBranchesHelper) beginBranchNode() (treeWalkerBeginBranchFn, error) {
	path := h.runner.currentPath

	return func(name policyBranchPath) error {
		h.runner.currentPath = path.Concat(name)
		return nil
	}, nil
}

func (h *listBranchesHelper) completeBranch(done bool) error {
	h.result.branches = append(h.result.branches, string(h.runner.currentPath))
	return nil
}

// Branches returns a list of every branch in this policy.
func (p *Policy) Branches() ([]string, error) {
	result := new(listBranchesResult)

	runner := newPolicyRunner(
		newNullPolicySession(tpm2.HashAlgorithmSHA256),
		new(mockPolicyParams),
		new(mockResources),
		func(runner *policyRunner) policyRunnerHelper { return newListBranchesHelper(runner, result) },
	)

	element := &policyElement{
		Type: tpm2.CommandPolicyOR,
		Details: &policyElementDetails{
			OR: &policyORElement{
				Branches: policyBranches{{Policy: p.policy.Policy}},
			},
		},
	}
	if err := runner.run(policyElements{element}); err != nil {
		return nil, err
	}

	return result.branches, nil
}

// PolicyNVDetails contains the properties of a TPM2_PolicyNV assertion.
type PolicyNVDetails struct {
	Auth      tpm2.Handle
	Index     NVIndex
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

// PolicyAuthorizationDetails contains the properties of a TPM2_PolicySecret or
// TPM2_PolicySigned assertion.
type PolicyAuthorizationDetails struct {
	AuthName  tpm2.Name
	PolicyRef tpm2.Nonce
}

// PolicyCounterTimerDetails contains the properties of a TPM2_PolicyCounterTimer
// assertion.
type PolicyCounterTimerDetails struct {
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

// PolicyPCRDetails contains the properties of a TPM2_PolicyPCR assertion.
type PolicyPCRDetails struct {
	PCRDigest tpm2.Digest
	PCRs      tpm2.PCRSelectionList
}

// PolicyBranchDetails contains the properties of a single policy branch.
type PolicyBranchDetails struct {
	NV                []PolicyNVDetails            // TPM2_PolicyNV assertions
	Secret            []PolicyAuthorizationDetails // TPM2_PolicySecret assertions
	Signed            []PolicyAuthorizationDetails // TPM2_PolicySigned assertions
	AuthValueNeeded   bool                         // The branch contains a TPM2_PolicyAuthValue or TPM2_PolicyPassword assertion
	policyCommandCode tpm2.CommandCodeList
	CounterTimer      []PolicyCounterTimerDetails // TPM2_PolicyCounterTimer assertions
	policyCpHash      tpm2.DigestList
	policyNameHash    tpm2.DigestList
	PCR               []PolicyPCRDetails // TPM2_PolicyPCR assertions
	policyNvWritten   []bool
}

// IsValid indicates whether the corresponding policy branch is valid.
func (r *PolicyBranchDetails) IsValid() bool {
	if len(r.policyCommandCode) > 1 {
		for _, code := range r.policyCommandCode[1:] {
			if code != r.policyCommandCode[0] {
				return false
			}
		}
	}

	cpHashNum := 0
	if len(r.policyCpHash) > 0 {
		if len(r.policyCpHash) > 1 {
			for _, cpHash := range r.policyCpHash[1:] {
				if !bytes.Equal(cpHash, r.policyCpHash[0]) {
					return false
				}
			}
		}
		cpHashNum += 1
	}
	if len(r.policyNameHash) > 0 {
		if len(r.policyNameHash) > 1 {
			return false
		}
		cpHashNum += 1
	}
	if cpHashNum > 1 {
		return false
	}
	if len(r.policyNvWritten) > 1 {
		for _, nvWritten := range r.policyNvWritten[1:] {
			if nvWritten != r.policyNvWritten[0] {
				return false
			}
		}
	}

	return true
}

// The command code associated with a branch if set, either set by the TPM2_PolicyCommandCode
// or TPM2_PolicyDuplicationSelect assertion.
func (r *PolicyBranchDetails) CommandCode() (code tpm2.CommandCode, set bool) {
	if len(r.policyCommandCode) == 0 {
		return 0, false
	}
	return r.policyCommandCode[0], true
}

// The cpHash associated with a branch if set, either set by the TPM2_PolicyCpHash,
// TPM2_PolicySecret, or TPM2_PolicySigned assertions.
func (r *PolicyBranchDetails) CpHash() (cpHashA tpm2.Digest, set bool) {
	if len(r.policyCpHash) == 0 {
		return nil, false
	}
	return r.policyCpHash[0], true
}

// The nameHash associated with a branch if set, either set by the TPM2_PolicyNameHash
// or TPM2_PolicyDuplicationSelect assertion.
func (r *PolicyBranchDetails) NameHash() (nameHash tpm2.Digest, set bool) {
	if len(r.policyNameHash) == 0 {
		return nil, false
	}
	return r.policyNameHash[0], true
}

// The nvWrittenSet value associated with a branch if set.
func (r *PolicyBranchDetails) NvWritten() (nvWrittenSet bool, set bool) {
	if len(r.policyNvWritten) == 0 {
		return false, false
	}
	return r.policyNvWritten[0], true
}

type policyDetailsResult struct {
	paths      []string
	detailsMap map[string]PolicyBranchDetails
}

func newPolicyDetailsResult() *policyDetailsResult {
	return &policyDetailsResult{
		detailsMap: make(map[string]PolicyBranchDetails),
	}
}

type policyDetailsHelper struct {
	policyBranchSelectMixin
	runner *policyRunner
	result *policyDetailsResult

	remaining policyBranchPath

	details PolicyBranchDetails
}

func newPolicyDetailsHelper(runner *policyRunner, result *policyDetailsResult, path string) *policyDetailsHelper {
	return &policyDetailsHelper{
		runner:    runner,
		result:    result,
		remaining: policyBranchPath(path),
	}
}

func (h *policyDetailsHelper) cpHash(cpHash *policyCpHashElement) error {
	return nil
}

func (h *policyDetailsHelper) nameHash(nameHash *policyNameHashElement) error {
	return nil
}

func (h *policyDetailsHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	next, remaining := h.remaining.PopNextComponent()
	if len(next) == 0 {
		// we're going to walk all of the remaining branches in the policy
		var (
			restoreHelper  func()
			restoreSession func()
		)

		restoreHelper = h.runner.overrideHelper(newTreeWalkerHelper(h.runner, treeWalkerModeGreedy, h.beginBranchNode, func(done bool) error {
			h.completeBranch()
			if done {
				restoreHelper()
				restoreSession()
			}
			return nil
		}))
		restoreSession = h.runner.overrideSession(&observingPolicySession{
			session: newNullPolicySession(h.runner.session().HashAlg()),
			details: &h.details,
		})

		h.runner.pushElements(policyElements{
			&policyElement{
				Type: tpm2.CommandPolicyOR,
				Details: &policyElementDetails{
					OR: &policyORElement{Branches: branches},
				},
			},
		})
		return nil
	}

	h.remaining = remaining
	selected, err := h.selectBranch(branches, next)
	if err != nil {
		return err
	}

	name := policyBranchPath(branches[selected].Name)
	if len(name) == 0 {
		name = policyBranchPath(fmt.Sprintf("$[%d]", selected))
	}
	h.runner.currentPath = h.runner.currentPath.Concat(name)

	h.runner.pushElements(branches[selected].Policy)

	return nil
}

func (h *policyDetailsHelper) beginBranchNode() (treeWalkerBeginBranchFn, error) {
	details := h.details
	path := h.runner.currentPath

	return func(name policyBranchPath) error {
		h.runner.currentPath = path.Concat(name)
		h.details = details
		h.runner.overrideSession(&observingPolicySession{
			session: newNullPolicySession(h.runner.session().HashAlg()),
			details: &h.details,
		})
		return nil
	}, nil
}

func (h *policyDetailsHelper) completeBranch() {
	h.result.detailsMap[string(h.runner.currentPath)] = h.details
	h.result.paths = append(h.result.paths, string(h.runner.currentPath))
}

// Details returns details of all branches with the supplied path prefix, for
// the specified algorithm.
func (p *Policy) Details(alg tpm2.HashAlgorithmId, path string) (map[string]PolicyBranchDetails, error) {
	result := newPolicyDetailsResult()

	session := &observingPolicySession{session: newNullPolicySession(alg)}
	runner := newPolicyRunner(
		session,
		new(mockPolicyParams),
		new(mockResources),
		func(runner *policyRunner) policyRunnerHelper {
			helper := newPolicyDetailsHelper(runner, result, path)
			session.details = &helper.details
			return helper
		},
	)

	if err := runner.run(p.policy.Policy); err != nil {
		return nil, err
	}

	if len(result.detailsMap) > 0 {
		return result.detailsMap, nil
	}

	out := make(map[string]PolicyBranchDetails)
	out[string(runner.currentPath)] = *session.details
	return out, nil
}
