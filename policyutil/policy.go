// Copyright 2023 Canonical Ltd.
// Licensed under the LGPLv3 with static-linking exception.
// See LICENCE file for details.

package policyutil

import (
	"bytes"
	"crypto"
	"crypto/sha256"
	"errors"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unicode/utf8"

	"github.com/canonical/go-tpm2"
	"github.com/canonical/go-tpm2/mu"
)

var (
	// ErrMissingDigest is returned from [Policy.Execute] when a TPM2_PolicyCpHash or
	// TPM2_PolicyNameHash assertion is missing a digest for the selected session algorithm.
	ErrMissingDigest = errors.New("missing digest for session algorithm")
)

type (
	taskFn   func() error
	paramKey [sha256.Size]byte
)

func policyParamKey(authName tpm2.Name, policyRef tpm2.Nonce) paramKey {
	h := crypto.SHA256.New()
	h.Write(authName)
	h.Write(policyRef)

	var key paramKey
	copy(key[:], h.Sum(nil))
	return key
}

// PolicyTicket corresponds to a ticket generated from a TPM2_PolicySigned or TPM2_PolicySecret
// assertion and is returned by [Policy.Execute]. Generated tickets can be supplied to
// [Policy.Execute] in the future in order to satisfy these assertions as long as they haven't
// expired.
type PolicyTicket struct {
	AuthName  tpm2.Name    // The name of the auth object associated with the corresponding assertion
	PolicyRef tpm2.Nonce   // The policy ref of the corresponding assertion
	CpHash    tpm2.Digest  // The cpHash supplied to the assertion that generated this ticket
	Timeout   tpm2.Timeout // The timeout returned by the assertion that generated this ticket

	// Ticket is the actual ticket returned by the TPM for the assertion that generated this ticket.
	// The Tag field indicates whether this was generated by TPM2_PolicySigned or TPM2_PolicySecret.
	Ticket *tpm2.TkAuth
}

// PolicyError is returned from [Policy.Execute] and other methods when an error
// is encountered during some processing of a policy. It provides an indication of
// where an error occurred.
type PolicyError struct {
	Path string // the path of the branch at which the error occurred
	task string
	err  error
}

func (e *PolicyError) Error() string {
	branch := "root branch"
	if len(e.Path) > 0 {
		branch = "branch " + e.Path
	}
	return fmt.Sprintf("cannot run '%s' task in %s: %v", e.task, branch, e.err)
}

func (e *PolicyError) Unwrap() error {
	return e.err
}

// PolicyAuthorizationError is returned from [Policy.Execute] if:
//   - the policy uses TPM2_PolicySecret and the associated object could not be authorized.
//   - the policy uses TPM2_PolicySigned and no or an invalid signed authorization was supplied.
//   - the policy uses TPM2_PolicyAuthorize and no or an invalid authorized policy was supplied.
type PolicyAuthorizationError struct {
	AuthName  tpm2.Name
	PolicyRef tpm2.Nonce
	err       error
}

func (e *PolicyAuthorizationError) Error() string {
	return fmt.Sprintf("cannot complete authorization with authName=%#x, policyRef=%#x: %v", e.AuthName, e.PolicyRef, e.err)
}

func (e *PolicyAuthorizationError) Unwrap() error {
	return e.err
}

// ResourceLoadError is returned from [Policy.Execute] if the policy required a resource that
// could not be loaded.
type ResourceLoadError struct {
	Name tpm2.Name
	err  error
}

func (e *ResourceLoadError) Error() string {
	return fmt.Sprintf("cannot load resource with name %#x: %v", e.Name, e.err)
}

func (e *ResourceLoadError) Unwrap() error {
	return e.err
}

type policyBranchName string

func (n policyBranchName) isValid() bool {
	if !utf8.ValidString(string(n)) {
		return false
	}
	if (len(n) > 0 && (n[0] == '$' || n[0] == '*')) || strings.HasPrefix(string(n), "â€¦") {
		return false
	}
	return true
}

func (n policyBranchName) Marshal(w io.Writer) error {
	if !n.isValid() {
		return errors.New("invalid name")
	}
	_, err := mu.MarshalToWriter(w, []byte(n))
	return err
}

func (n *policyBranchName) Unmarshal(r io.Reader) error {
	var b []byte
	if _, err := mu.UnmarshalFromReader(r, &b); err != nil {
		return err
	}
	name := policyBranchName(b)
	if !name.isValid() {
		return errors.New("invalid name")
	}
	*n = name
	return nil
}

type policyBranchPath string

func (p policyBranchPath) PopNextComponent() (next policyBranchPath, remaining policyBranchPath) {
	remaining = p
	for len(remaining) > 0 {
		s := strings.SplitN(string(remaining), "/", 2)
		remaining = ""
		if len(s) == 2 {
			remaining = policyBranchPath(s[1])
		}
		component := policyBranchPath(s[0])
		if len(component) > 0 {
			return component, remaining
		}
	}

	return "", ""
}

func (p policyBranchPath) Concat(path policyBranchPath) policyBranchPath {
	var pathElements []string
	if p != "" {
		pathElements = append(pathElements, string(p))
	}
	if path != "" {
		pathElements = append(pathElements, string(path))
	}
	return policyBranchPath(strings.Join(pathElements, "/"))
}

// PolicySessionUsage describes how a policy session will be used, and assists with
// automatically selecting branches where a policy has command context-specific branches.
type PolicySessionUsage struct {
	commandCode tpm2.CommandCode
	handles     []Named
	params      []interface{}
	nvHandle    tpm2.Handle
}

// NewPolicySessionUsage creates a new PolicySessionUsage.
func NewPolicySessionUsage(command tpm2.CommandCode, handles []Named, params ...interface{}) *PolicySessionUsage {
	return &PolicySessionUsage{
		commandCode: command,
		handles:     handles,
		params:      params,
	}
}

// WithNVHandle indicates that the policy session is being used to authorize a NV
// index with the specified handle. This will panic if handle is not a NV index.
func (u *PolicySessionUsage) WithNVHandle(handle tpm2.Handle) *PolicySessionUsage {
	if handle.Type() != tpm2.HandleTypeNVIndex {
		panic("invalid handle")
	}
	u.nvHandle = handle
	return u
}

// PolicyExecuteParams contains parameters that are useful for executing a policy.
type PolicyExecuteParams struct {
	Tickets []*PolicyTicket // Tickets for TPM2_PolicySecret and TPM2_PolicySigned assertions

	// Usage describes how the executed policy will be used, and assists with
	// automatically selecting branches where a policy has command context-specific
	// branches.
	Usage *PolicySessionUsage

	// Path provides a way to explicitly select branches to execute. A path consists
	// of zero or more components separated by a '/' character, with each component
	// identifying a branch to select when a branch node is encountered during
	// execution. When a branch node is encountered, the selected sub-branch is
	// executed, before resuming execution in the original branch immediately after
	// the branch node.
	//
	// A component can either identify a branch by its name (if it has one), or it
	// can be a numeric identifier of the form "$[n]" which selects the branch at
	// index n.
	//
	// If a component is "**", then Policy.Execute will attempt to automatically
	// select an execution path for the sub-tree associated with the current branch
	// node, which includes choosing the immediate sub-branch and any additional
	// sub-branches for branch nodes encountered during its execution. Remaining path
	// components will be consumed for additional branch nodes in the current branch.
	// If a component is "*", then Policy.Execute will attempt to automatically
	// select an immediate sub-branch.
	//
	// Path components are also used to select an authorized policy. In this case,
	// the policy is selected by a component that matches the digest of the policy
	// for the current session algorithm. If the component is "*", then Policy.Execute
	// will attempt to automatically select an appropriate policy. The component will
	// only be consumed to select the policy - branches within the selected authorized
	// policy will be selected by subsequent components. If the component is "**" then
	// Policy.Execute will attempt to automatically select an appropriate policy and
	// the entire execution path for the sub-policy.
	//
	// If the path has insufficent components for the branch nodes or authorized policies
	// encountered in a policy, Policy.Execute will attempt to select an appropriate
	// execution path automatically.
	Path string
}

type policyParams interface {
	ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket
}

type policyRunnerHelper interface {
	cpHash(cpHash *policyCpHashElement) error
	nameHash(nameHash *policyNameHashElement) error
	handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error
	handleAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy, complete func(tpm2.Digest, *tpm2.TkVerified) error) error
}

type policySessionContext interface {
	session() PolicySession
	resources() policyResources
	helper() policyRunnerHelper

	ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket
	addTicket(ticket *PolicyTicket)
	removeTicket(ticket *PolicyTicket)
}

type policyRunnerController interface {
	currentTaskName() string

	currentPath() policyBranchPath
	setCurrentPath(path policyBranchPath) (restore func())

	pushTasks(fns ...taskFn)
	pushElements(elements policyElements)
	appendTask(fn taskFn)

	snapshotTasks() (restore func(), n int)
	clearTasks()

	session() PolicySession
	setSession(session PolicySession) (restore func())
}

type taggedHash struct {
	HashAlg tpm2.HashAlgorithmId
	Digest  tpm2.Digest
}

func (h taggedHash) Marshal(w io.Writer) error {
	ta := tpm2.MakeTaggedHash(h.HashAlg, h.Digest)
	_, err := mu.MarshalToWriter(w, ta)
	return err
}

func (h *taggedHash) Unmarshal(r io.Reader) error {
	var ta tpm2.TaggedHash
	if _, err := mu.UnmarshalFromReader(r, &ta); err != nil {
		return err
	}

	if ta.HashAlg != tpm2.HashAlgorithmNull && !ta.HashAlg.IsValid() {
		return errors.New("invalid digest algorithm")
	}

	*h = taggedHash{
		HashAlg: ta.HashAlg,
		Digest:  ta.Digest()}
	return nil
}

type taggedHashList []taggedHash

type policyNVElement struct {
	NvIndex   *tpm2.NVPublic
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

func (*policyNVElement) name() string { return "TPM2_PolicyNV assertion" }

func (e *policyNVElement) run(context policySessionContext) error {
	nvIndex, policy, err := context.resources().LoadNV(e.NvIndex)
	if err != nil {
		return fmt.Errorf("cannot create nvIndex context: %w", err)
	}

	var auth ResourceContext = newResourceContextNonFlushable(nvIndex)
	switch {
	case e.NvIndex.Attrs&tpm2.AttrNVAuthRead != 0:
		policy = nil
	case e.NvIndex.Attrs&tpm2.AttrNVOwnerRead != 0:
		auth, policy, err = context.resources().LoadName(tpm2.MakeHandleName(tpm2.HandleOwner))
	case e.NvIndex.Attrs&tpm2.AttrNVPPRead != 0:
		auth, policy, err = context.resources().LoadName(tpm2.MakeHandleName(tpm2.HandlePlatform))
	}
	if err != nil {
		return fmt.Errorf("cannot create auth context: %w", err)
	}
	if policy != nil {
		return errors.New("unsupported auth method")
	}

	session, err := context.resources().NewSession(auth.Resource().Name().Algorithm(), tpm2.SessionTypeHMAC)
	if err != nil {
		return fmt.Errorf("cannot create session to authorize auth object: %w", err)
	}
	defer func() {
		if session == nil {
			return
		}
		session.Close()
	}()

	if err := context.resources().Authorize(auth.Resource()); err != nil {
		return fmt.Errorf("cannot authorize auth object: %w", err)
	}

	var tpmSession tpm2.SessionContext
	if session != nil {
		tpmSession = session.Session()
	}

	return context.session().PolicyNV(auth.Resource(), nvIndex, e.OperandB, e.Offset, e.Operation, tpmSession)
}

type policySecretElement struct {
	AuthObjectName tpm2.Name
	PolicyRef      tpm2.Nonce
}

func (*policySecretElement) name() string { return "TPM2_PolicySecret assertion" }

func (e *policySecretElement) run(context policySessionContext) error {
	if ticket := context.ticket(e.AuthObjectName, e.PolicyRef); ticket != nil {
		err := context.session().PolicyTicket(ticket.Timeout, ticket.CpHash, ticket.PolicyRef, ticket.AuthName, ticket.Ticket)
		switch {
		case tpm2.IsTPMParameterError(err, tpm2.ErrorExpired, tpm2.CommandPolicyTicket, 1):
			// The ticket has expired - ignore this and fall through to PolicySecret
			context.removeTicket(ticket)
		case tpm2.IsTPMParameterError(err, tpm2.ErrorTicket, tpm2.CommandPolicyTicket, 5):
			// The ticket is invalid - ignore this and fall through to PolicySecret
			context.removeTicket(ticket)
		case err != nil:
			return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: err}
		default:
			// The ticket was accepted
			return nil
		}
	}

	authObject, policy, err := context.resources().LoadName(e.AuthObjectName)
	if err != nil {
		return &ResourceLoadError{Name: e.AuthObjectName, err: err}
	}
	defer func() {
		if authObject.Resource().Handle().Type() != tpm2.HandleTypeTransient {
			return
		}
		authObject.Flush()
	}()
	if policy != nil {
		return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: errors.New("unsupported auth method")}
	}

	session, err := context.resources().NewSession(e.AuthObjectName.Algorithm(), tpm2.SessionTypeHMAC)
	if err != nil {
		return &PolicyAuthorizationError{
			AuthName:  e.AuthObjectName,
			PolicyRef: e.PolicyRef,
			err:       fmt.Errorf("cannot create session to authorize auth object: %w", err)}
	}
	defer func() {
		if session == nil {
			return
		}
		session.Close()
	}()

	if err := context.resources().Authorize(authObject.Resource()); err != nil {
		return &PolicyAuthorizationError{
			AuthName:  e.AuthObjectName,
			PolicyRef: e.PolicyRef,
			err:       fmt.Errorf("cannot authorize auth object: %w", err)}
	}

	var tpmSession tpm2.SessionContext
	if session != nil {
		tpmSession = session.Session()
	}

	timeout, ticket, err := context.session().PolicySecret(authObject.Resource(), nil, e.PolicyRef, 0, tpmSession)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: err}
	}

	context.addTicket(&PolicyTicket{
		AuthName:  e.AuthObjectName,
		PolicyRef: e.PolicyRef,
		CpHash:    nil,
		Timeout:   timeout,
		Ticket:    ticket})
	return nil
}

type policySignedElement struct {
	AuthKey   *tpm2.Public
	PolicyRef tpm2.Nonce
}

func (*policySignedElement) name() string { return "TPM2_PolicySigned assertion" }

func (e *policySignedElement) run(context policySessionContext) error {
	authKeyName := e.AuthKey.Name()
	if !authKeyName.IsValid() {
		return errors.New("invalid auth key name")
	}

	if ticket := context.ticket(authKeyName, e.PolicyRef); ticket != nil {
		err := context.session().PolicyTicket(ticket.Timeout, ticket.CpHash, ticket.PolicyRef, ticket.AuthName, ticket.Ticket)
		switch {
		case tpm2.IsTPMParameterError(err, tpm2.ErrorExpired, tpm2.CommandPolicyTicket, 1):
			// The ticket has expired - ignore this and fall through to PolicySigned
			context.removeTicket(ticket)
		case tpm2.IsTPMParameterError(err, tpm2.ErrorTicket, tpm2.CommandPolicyTicket, 5):
			// The ticket is invalid - ignore this and fall through to PolicySigned
			context.removeTicket(ticket)
		case err != nil:
			return &PolicyAuthorizationError{AuthName: authKeyName, PolicyRef: e.PolicyRef, err: err}
		default:
			// The ticket was accepted
			return nil
		}
	}

	auth, err := context.resources().SignAuthorization(context.session().NonceTPM(), authKeyName, e.PolicyRef)
	if err != nil {
		return &PolicyAuthorizationError{
			AuthName:  authKeyName,
			PolicyRef: e.PolicyRef,
			err:       fmt.Errorf("cannot obtain signed authorization: %w", err),
		}
	}

	authKey, err := context.resources().LoadExternal(e.AuthKey)
	if err != nil {
		return fmt.Errorf("cannot create authKey context: %w", err)
	}
	defer authKey.Flush()

	includeNonceTPM := false
	if len(auth.NonceTPM) > 0 {
		includeNonceTPM = true
	}

	timeout, ticket, err := context.session().PolicySigned(authKey.Resource(), includeNonceTPM, auth.CpHash, e.PolicyRef, auth.Expiration, auth.Authorization.Signature)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: authKeyName, PolicyRef: e.PolicyRef, err: err}
	}

	context.addTicket(&PolicyTicket{
		AuthName:  authKeyName,
		PolicyRef: e.PolicyRef,
		CpHash:    auth.CpHash,
		Timeout:   timeout,
		Ticket:    ticket})
	return nil
}

type policyAuthorizations []PolicyAuthorization

type policyAuthorizeElement struct {
	PolicyRef tpm2.Nonce
	KeySign   *tpm2.Public
}

func (*policyAuthorizeElement) name() string { return "authorized policy" }

func (e *policyAuthorizeElement) run(context policySessionContext) error {
	keySignName := e.KeySign.Name()
	if !keySignName.IsValid() {
		return errors.New("invalid keySign")
	}

	policies, err := context.resources().LoadAuthorizedPolicies(keySignName, e.PolicyRef)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: keySignName, PolicyRef: e.PolicyRef, err: err}
	}
	if err := context.helper().handleAuthorizedPolicy(e.KeySign, e.PolicyRef, policies, func(approvedPolicy tpm2.Digest, checkTicket *tpm2.TkVerified) error {
		return context.session().PolicyAuthorize(approvedPolicy, e.PolicyRef, keySignName, checkTicket)
	}); err != nil {
		return &PolicyAuthorizationError{AuthName: keySignName, PolicyRef: e.PolicyRef, err: err}
	}
	return nil
}

type policyAuthValueElement struct{}

func (*policyAuthValueElement) name() string { return "TPM2_PolicyAuthValue assertion" }

func (*policyAuthValueElement) run(context policySessionContext) error {
	return context.session().PolicyAuthValue()
}

type policyCommandCodeElement struct {
	CommandCode tpm2.CommandCode
}

func (*policyCommandCodeElement) name() string { return "TPM2_PolicyCommandCode assertion" }

func (e *policyCommandCodeElement) run(context policySessionContext) error {
	return context.session().PolicyCommandCode(e.CommandCode)
}

type policyCounterTimerElement struct {
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

func (*policyCounterTimerElement) name() string { return "TPM2_PolicyCounterTimer assertion" }

func (e *policyCounterTimerElement) run(context policySessionContext) error {
	return context.session().PolicyCounterTimer(e.OperandB, e.Offset, e.Operation)
}

type policyCpHashElement struct {
	CommandCode tpm2.CommandCode
	Handles     []tpm2.Name
	CpBytes     []byte

	Digest tpm2.Digest
}

func (*policyCpHashElement) name() string { return "TPM2_PolicyCpHash assertion" }

func (e *policyCpHashElement) run(context policySessionContext) error {
	if err := context.helper().cpHash(e); err != nil {
		return err
	}
	return context.session().PolicyCpHash(e.Digest)
}

type policyNameHashElement struct {
	Handles []tpm2.Name

	Digest tpm2.Digest
}

func (*policyNameHashElement) name() string { return "TPM2_PolicyNameHash assertion" }

func (e *policyNameHashElement) run(context policySessionContext) error {
	if err := context.helper().nameHash(e); err != nil {
		return err
	}
	return context.session().PolicyNameHash(e.Digest)
}

type policyBranch struct {
	Name          policyBranchName
	PolicyDigests taggedHashList
	Policy        policyElements
}

type policyBranches []*policyBranch

type policyORElement struct {
	Branches policyBranches
}

func (*policyORElement) name() string { return "branch node" }

func (e *policyORElement) run(context policySessionContext) error {
	return context.helper().handleBranches(e.Branches, func(digests tpm2.DigestList, selected int) error {
		tree, err := newPolicyOrTree(context.session().HashAlg(), digests)
		if err != nil {
			return fmt.Errorf("cannot compute PolicyOR tree: %w", err)
		}

		pHashLists := tree.selectBranch(selected)

		for _, pHashList := range pHashLists {
			if err := context.session().PolicyOR(pHashList); err != nil {
				return err
			}
		}
		return nil
	})
}

type pcrValue struct {
	PCR    tpm2.Handle
	Digest taggedHash
}

type pcrValueList []pcrValue

type policyPCRElement struct {
	PCRs pcrValueList
}

func (*policyPCRElement) name() string { return "TPM2_PolicyPCR assertion" }

func (e *policyPCRElement) run(context policySessionContext) error {
	values, err := e.pcrValues()
	if err != nil {
		return err
	}
	pcrs, pcrDigest, err := ComputePCRDigestFromAllValues(context.session().HashAlg(), values)
	if err != nil {
		return fmt.Errorf("cannot compute PCR digest: %w", err)
	}
	return context.session().PolicyPCR(pcrDigest, pcrs)
}

func (e *policyPCRElement) pcrValues() (tpm2.PCRValues, error) {
	values := make(tpm2.PCRValues)
	for i, value := range e.PCRs {
		if value.PCR.Type() != tpm2.HandleTypePCR {
			return nil, fmt.Errorf("invalid PCR handle at index %d", i)
		}
		if err := values.SetValue(value.Digest.HashAlg, int(value.PCR), value.Digest.Digest); err != nil {
			return nil, fmt.Errorf("invalid PCR value at index %d: %w", i, err)
		}
	}
	return values, nil
}

type policyDuplicationSelectElement struct {
	Object        tpm2.Name
	NewParent     tpm2.Name
	IncludeObject bool
}

func (*policyDuplicationSelectElement) name() string { return "TPM2_PolicyDuplicationSelect assertion" }

func (e *policyDuplicationSelectElement) run(context policySessionContext) error {
	return context.session().PolicyDuplicationSelect(e.Object, e.NewParent, e.IncludeObject)
}

type policyPasswordElement struct{}

func (*policyPasswordElement) name() string { return "TPM2_PolicyPassword assertion" }

func (*policyPasswordElement) run(context policySessionContext) error {
	return context.session().PolicyPassword()
}

type policyNvWrittenElement struct {
	WrittenSet bool
}

func (*policyNvWrittenElement) name() string { return "TPM2_PolicyNvWritten assertion" }

func (e *policyNvWrittenElement) run(context policySessionContext) error {
	return context.session().PolicyNvWritten(e.WrittenSet)
}

type policyElementDetails struct {
	NV                *policyNVElement
	Secret            *policySecretElement
	Signed            *policySignedElement
	Authorize         *policyAuthorizeElement
	AuthValue         *policyAuthValueElement
	CommandCode       *policyCommandCodeElement
	CounterTimer      *policyCounterTimerElement
	CpHash            *policyCpHashElement
	NameHash          *policyNameHashElement
	OR                *policyORElement
	PCR               *policyPCRElement
	DuplicationSelect *policyDuplicationSelectElement
	Password          *policyPasswordElement
	NvWritten         *policyNvWrittenElement
}

func (d *policyElementDetails) Select(selector reflect.Value) interface{} {
	switch selector.Interface().(tpm2.CommandCode) {
	case tpm2.CommandPolicyNV:
		return &d.NV
	case tpm2.CommandPolicySecret:
		return &d.Secret
	case tpm2.CommandPolicySigned:
		return &d.Signed
	case tpm2.CommandPolicyAuthorize:
		return &d.Authorize
	case tpm2.CommandPolicyAuthValue:
		return &d.AuthValue
	case tpm2.CommandPolicyCommandCode:
		return &d.CommandCode
	case tpm2.CommandPolicyCounterTimer:
		return &d.CounterTimer
	case tpm2.CommandPolicyCpHash:
		return &d.CpHash
	case tpm2.CommandPolicyNameHash:
		return &d.NameHash
	case tpm2.CommandPolicyOR:
		return &d.OR
	case tpm2.CommandPolicyPCR:
		return &d.PCR
	case tpm2.CommandPolicyDuplicationSelect:
		return &d.DuplicationSelect
	case tpm2.CommandPolicyPassword:
		return &d.Password
	case tpm2.CommandPolicyNvWritten:
		return &d.NvWritten
	default:
		return nil
	}
}

type policyElementRunner interface {
	name() string
	run(context policySessionContext) error
}

type policyElement struct {
	Type    tpm2.CommandCode
	Details *policyElementDetails
}

func (e *policyElement) runner() policyElementRunner {
	switch e.Type {
	case tpm2.CommandPolicyNV:
		return e.Details.NV
	case tpm2.CommandPolicySecret:
		return e.Details.Secret
	case tpm2.CommandPolicySigned:
		return e.Details.Signed
	case tpm2.CommandPolicyAuthorize:
		return e.Details.Authorize
	case tpm2.CommandPolicyAuthValue:
		return e.Details.AuthValue
	case tpm2.CommandPolicyCommandCode:
		return e.Details.CommandCode
	case tpm2.CommandPolicyCounterTimer:
		return e.Details.CounterTimer
	case tpm2.CommandPolicyCpHash:
		return e.Details.CpHash
	case tpm2.CommandPolicyNameHash:
		return e.Details.NameHash
	case tpm2.CommandPolicyOR:
		return e.Details.OR
	case tpm2.CommandPolicyPCR:
		return e.Details.PCR
	case tpm2.CommandPolicyDuplicationSelect:
		return e.Details.DuplicationSelect
	case tpm2.CommandPolicyPassword:
		return e.Details.Password
	case tpm2.CommandPolicyNvWritten:
		return e.Details.NvWritten
	default:
		panic("invalid type")
	}
}

type policyElements []*policyElement

type policy struct {
	PolicyDigests        taggedHashList
	PolicyAuthorizations policyAuthorizations
	Policy               policyElements
}

// Policy corresponds to an authorization policy. It can be serialized with
// [github.com/canonical/go-tpm2/mu].
type Policy struct {
	policy policy
}

// Marshal implements [mu.CustomMarshaller.Marshal].
func (p Policy) Marshal(w io.Writer) error {
	_, err := mu.MarshalToWriter(w, p.policy)
	return err
}

// Unmarshal implements [mu.CustomMarshaller.Unarshal].
func (p *Policy) Unmarshal(r io.Reader) error {
	_, err := mu.UnmarshalFromReader(r, &p.policy)
	return err
}

type policyTask struct {
	name string
	fn   taskFn
}

func newElementPolicyTask(context policySessionContext, element *policyElement) *policyTask {
	runner := element.runner()
	return &policyTask{
		name: runner.name(),
		fn: func() error {
			return runner.run(context)
		},
	}
}

func newDeferredPolicyTask(controller policyRunnerController, fn taskFn) *policyTask {
	return &policyTask{
		name: controller.currentTaskName(),
		fn:   fn,
	}
}

type policyRunner struct {
	policySession      PolicySession
	policyResources    policyResources
	policyRunnerHelper policyRunnerHelper

	tickets map[paramKey]*PolicyTicket

	policyCurrentTaskName string
	policyCurrentPath     policyBranchPath

	tasks []*policyTask
}

func newPolicyRunner(session PolicySession, resources policyResources, newHelperFn func(*policyRunner) policyRunnerHelper) *policyRunner {
	out := &policyRunner{
		policySession:   session,
		policyResources: resources,
		tickets:         make(map[paramKey]*PolicyTicket),
	}
	out.policyRunnerHelper = newHelperFn(out)
	return out
}

func (r *policyRunner) session() PolicySession {
	return r.policySession
}

func (r *policyRunner) resources() policyResources {
	return r.policyResources
}

func (r *policyRunner) helper() policyRunnerHelper {
	return r.policyRunnerHelper
}

func (r *policyRunner) ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket {
	return r.tickets[policyParamKey(authName, policyRef)]
}

func (r *policyRunner) addTicket(ticket *PolicyTicket) {
	if ticket.Ticket == nil || (ticket.Ticket.Hierarchy == tpm2.HandleNull && len(ticket.Ticket.Digest) == 0) {
		// skip null tickets
		return
	}
	r.tickets[policyParamKey(ticket.AuthName, ticket.PolicyRef)] = ticket
}

func (r *policyRunner) removeTicket(ticket *PolicyTicket) {
	delete(r.tickets, policyParamKey(ticket.AuthName, ticket.PolicyRef))
}

func (r *policyRunner) currentTaskName() string {
	return r.policyCurrentTaskName
}

func (r *policyRunner) currentPath() policyBranchPath {
	return r.policyCurrentPath
}

func (r *policyRunner) setCurrentPath(path policyBranchPath) (restore func()) {
	orig := r.policyCurrentPath
	r.policyCurrentPath = path
	return func() {
		r.policyCurrentPath = orig
	}
}

func (r *policyRunner) pushTasks(fns ...taskFn) {
	var tasks []*policyTask
	for _, fn := range fns {
		tasks = append(tasks, newDeferredPolicyTask(r, fn))
	}
	r.tasks = append(tasks, r.tasks...)
}

func (r *policyRunner) pushElements(elements policyElements) {
	var tasks []*policyTask
	for _, element := range elements {
		tasks = append(tasks, newElementPolicyTask(r, element))
	}
	r.tasks = append(tasks, r.tasks...)
}

func (r *policyRunner) appendTask(fn taskFn) {
	r.tasks = append(r.tasks, newDeferredPolicyTask(r, fn))
}

func (r *policyRunner) snapshotTasks() (restore func(), n int) {
	tasks := r.tasks
	return func() {
		r.tasks = tasks
	}, len(tasks)
}

func (r *policyRunner) clearTasks() {
	r.tasks = nil
}

func (r *policyRunner) setSession(session PolicySession) (restore func()) {
	orig := r.policySession
	r.policySession = session
	return func() {
		r.policySession = orig
	}
}

func (r *policyRunner) more() bool {
	return len(r.tasks) > 0
}

func (r *policyRunner) runNextTask() error {
	task := r.tasks[0]
	r.tasks = r.tasks[1:]
	r.policyCurrentTaskName = task.name
	return task.fn()
}

func (r *policyRunner) run(policy policyElements) error {
	r.pushElements(policy)

	for r.more() {
		if err := r.runNextTask(); err != nil {
			return &PolicyError{Path: string(r.policyCurrentPath), task: r.policyCurrentTaskName, err: err}
		}
	}

	return nil
}

type executePolicyHelper struct {
	policyBranchSelectMixin
	sessionAlg tpm2.HashAlgorithmId
	resources  policyResources
	controller policyRunnerController
	tpm        tpmConnection
	remaining  policyBranchPath
	usage      *PolicySessionUsage
}

func newExecutePolicyHelper(runner *policyRunner, tpm tpmConnection, params *PolicyExecuteParams) *executePolicyHelper {
	return &executePolicyHelper{
		sessionAlg: runner.session().HashAlg(),
		resources:  runner.resources(),
		controller: runner,
		tpm:        tpm,
		remaining:  policyBranchPath(params.Path),
		usage:      params.Usage,
	}
}

func (h *executePolicyHelper) cpHash(cpHash *policyCpHashElement) error {
	return nil
}

func (h *executePolicyHelper) nameHash(nameHash *policyNameHashElement) error {
	return nil
}

func (h *executePolicyHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	if len(branches) == 0 {
		return errors.New("no branches")
	}

	next, remaining := h.remaining.PopNextComponent()
	if len(next) == 0 || next[0] == '*' {
		// There are no more components or the next component is a wildcard match - build a
		// list of candidate paths for this subtree
		filter := newPolicyBranchFilter(h.sessionAlg, h.resources, h.tpm, h.usage)
		candidates, err := filter.filterBranches(branches)
		if err != nil {
			return fmt.Errorf("cannot filter inappropriate branches: %w", err)
		}
		if len(candidates) == 0 {
			return errors.New("cannot select branch: no appropriate branches")
		}

		// Prefer paths without TPM2_PolicyAuthValue, TPM2_PolicyPassword, TPM2_PolicySigned,
		// TPM2_PolicySecret and TPM2_PolicyNV assertions.
		path := candidates[0].path
		for _, candidate := range candidates {
			if !candidate.details.AuthValueNeeded && len(candidate.details.Signed) == 0 && len(candidate.details.Secret) == 0 && len(candidate.details.NV) == 0 {
				path = candidate.path
				break
			}
		}
		switch next {
		case "":
			// We have a path for this whole subtree
			h.remaining = path
		case "**":
			// Prepend the path for this whole subtree to the remaining components
			h.remaining = path.Concat(remaining)
		case "*":
			// Prepend the first component of the path for this subtree to the remaining components
			component, _ := path.PopNextComponent()
			h.remaining = component.Concat(remaining)
		default:
			panic("not reached")
		}

		// rerun branch node
		h.controller.pushElements(policyElements{&policyElement{
			Type: tpm2.CommandPolicyOR,
			Details: &policyElementDetails{
				OR: &policyORElement{Branches: branches}}}})
		return nil
	}

	// We have a branch selector
	h.remaining = remaining
	selected, err := h.selectBranch(branches, next)
	if err != nil {
		return err
	}

	// Obtain the branch digests
	var digests tpm2.DigestList
	for _, branch := range branches {
		found := false
		for _, digest := range branch.PolicyDigests {
			if digest.HashAlg != h.sessionAlg {
				continue
			}

			digests = append(digests, digest.Digest)
			found = true
			break
		}
		if !found {
			return ErrMissingDigest
		}
	}

	// Run it!
	h.controller.pushTasks(func() error {
		if err := complete(digests, selected); err != nil {
			return fmt.Errorf("cannot complete: %w", err)
		}
		return nil
	})
	h.controller.pushElements(branches[selected].Policy)
	h.controller.setCurrentPath(h.controller.currentPath().Concat(next))

	return nil
}

func (h *executePolicyHelper) handleAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy, complete func(tpm2.Digest, *tpm2.TkVerified) error) error {
	// Filter out policies that aren't computed for the current session algorithm.
	var candidatePolicies []*Policy
	var branches policyBranches
	for _, policy := range policies {
		for _, digest := range policy.policy.PolicyDigests {
			if digest.HashAlg != h.sessionAlg {
				continue
			}

			candidatePolicies = append(candidatePolicies, policy)
			branches = append(branches, &policyBranch{
				Name:   policyBranchName(fmt.Sprintf("%x", digest.Digest)),
				Policy: policy.policy.Policy,
			})
			break
		}
	}
	if len(candidatePolicies) == 0 {
		return errors.New("no valid candidate policies")
	}

	next, remaining := h.remaining.PopNextComponent()
	switch {
	case len(next) > 0 && next[0] == '$':
		// Don't permit numeric selectors for authorized policies.
		return fmt.Errorf("invalid path component \"%s\" for authorized policy selector", next)
	case len(next) == 0 || next[0] == '*':
		// There are no more components or the next component is a wildcard match - build a
		// list of candidate paths for this subtree
		filter := newPolicyBranchFilter(h.sessionAlg, h.resources, h.tpm, h.usage)
		candidates, err := filter.filterBranches(branches)
		if err != nil {
			return fmt.Errorf("cannot filter inappropriate policies: %w", err)
		}
		if len(candidates) == 0 {
			return errors.New("cannot select authorized policy: no appropriate policy")
		}

		// Prefer paths without TPM2_PolicyAuthValue, TPM2_PolicyPassword, TPM2_PolicySigned,
		// TPM2_PolicySecret and TPM2_PolicyNV assertions.
		path := candidates[0].path
		for _, candidate := range candidates {
			if !candidate.details.AuthValueNeeded && len(candidate.details.Signed) == 0 && len(candidate.details.Secret) == 0 && len(candidate.details.NV) == 0 {
				path = candidate.path
				break
			}
		}
		switch next {
		case "":
			// We have a path for this whole subtree
			h.remaining = path
		case "**":
			// Prepend the path for this whole subtree to the remaining components
			h.remaining = path.Concat(remaining)
		case "*":
			// Prepend the first component of the path for this subtree to the remaining components
			component, _ := path.PopNextComponent()
			h.remaining = component.Concat(remaining)
		default:
			panic("not reached")
		}

		// rerun
		h.controller.pushTasks(func() error {
			if err := h.handleAuthorizedPolicy(keySign, policyRef, policies, complete); err != nil {
				return &PolicyAuthorizationError{AuthName: keySign.Name(), PolicyRef: policyRef, err: err}
			}
			return nil
		})
		return nil
	}

	// We have a policy selector
	h.remaining = remaining
	selected, err := h.selectBranch(branches, next)
	if err != nil {
		return err
	}

	h.controller.setCurrentPath(h.controller.currentPath().Concat(next))

	policy := candidatePolicies[selected]

	// Find the approved digest
	var approvedPolicy tpm2.Digest
	for _, digest := range policy.policy.PolicyDigests {
		if digest.HashAlg != h.sessionAlg {
			continue
		}
		approvedPolicy = digest.Digest
		break
	}
	if approvedPolicy == nil {
		// XXX: this shouldn't happen
		return ErrMissingDigest
	}

	// Find the signed authorization
	var policyAuth *PolicyAuthorization
	for _, auth := range policy.policy.PolicyAuthorizations {
		if !bytes.Equal(auth.AuthKey.Name(), keySign.Name()) {
			continue
		}
		if !bytes.Equal(auth.PolicyRef, policyRef) {
			continue
		}
		policyAuth = &auth
		break
	}
	if policyAuth == nil || policyAuth.Signature == nil {
		// this should only happen if the caller supplied policies without
		// a valid authorization
		return errors.New("missing policy authorization")
	}

	// Verify the signature
	tbs := ComputePolicyAuthorizationTBSDigest(keySign.Name().Algorithm().GetHash(), approvedPolicy, policyRef)
	ticket, err := h.tpm.VerifySignature(keySign, tbs, policyAuth.Signature)
	if err != nil {
		return err
	}

	// Run it
	h.controller.pushTasks(func() error {
		if err := complete(approvedPolicy, ticket); err != nil {
			return fmt.Errorf("cannot complete: %w", err)
		}
		return nil
	})
	h.controller.pushElements(policy.policy.Policy)

	return nil
}

// Execute runs this policy using the supplied TPM context and on the supplied policy session.
//
// The caller may supply additional parameters via the PolicyExecuteParams struct, which is an
// optional argument. This can contain parameters for TPM2_PolicySecret assertions, signed
// authorizations for TPM2_PolicySigned assertions, or tickets to satisfy TPM2_PolicySecret or
// TPM2_PolicySigned assertions. Each of these parameters are associated with a policy assertion
// by a name and policy reference.
//
// Resources required by a policy are obtained from the supplied PolicyExecuteHelper, which is
// optional but must be supplied for any policy that executes TPM2_PolicyNV, TPM2_PolicySecret or
// TPM2_PolicySigned assertions.
//
// The caller may explicitly select branches to execute via the Path argument of
// [PolicyExecuteParams]. Alternatively, if branches are not specified explicitly, an
// appropriate branch is selected automatically where possible. This works by selecting the
// first branch from all of the candidate branches, with a preference for branches that
// don't include TPM2_PolicySecret, TPM2_PolicyAuthValue and TPM2_PolicyPassword assertions.
// Branches are omitted from the set of candidate branches if any of the following conditions are
// true:
//   - It contains a command code, command parameter hash, or name hash that doesn't match
//     the supplied [PolicySessionUsage].
//   - It uses TPM2_PolicyNvWritten with a value that doesn't match the public area of the NV index
//     provided via the supplied [PolicySessionUsage].
//   - It uses TPM2_PolicySigned and there is no [PolicySignedAuthorization] or [PolicyTicket]
//     supplied. Note that if either of these are supplied, it is assumed that they will succeed.
//   - It uses TPM2_PolicyPCR with values that don't match the current PCR values.
//   - It uses TPM2_PolicyCounterTimer with conditions that will fail.
//
// Note that when automatically selecting branches, it is assumed that any TPM2_PolicySecret or
// TPM2_PolicyNV assertions will succeed.
//
// The supplied PolicyExecuteHelper is used to obtain current TPM state when determining which
// branches to execute. This is required for policies that include TPM2_PolicyPCR,
// TPM2_PolicyCounterTimer or TPM2_PolicyNvWritten assertions.
//
// On success, the supplied policy session may be used for authorization in a context that requires
// that this policy is satisfied. It will also return a list of tickets generated by any assertions -
// this may include supplied tickets if they are still valid or weren't used. It will indicate whether
// the authorization value must be supplied for the resource being authorized.
func (p *Policy) Execute(session PolicySession, helper PolicyExecuteHelper, params *PolicyExecuteParams) (tickets []*PolicyTicket, requireAuthValue bool, err error) {
	if session == nil {
		return nil, false, errors.New("no session")
	}
	if helper == nil {
		helper = new(nullPolicyExecuteHelper)
	}
	if params == nil {
		params = new(PolicyExecuteParams)
	}

	var details PolicyBranchDetails

	runner := newPolicyRunner(
		&observingPolicySession{session: session, details: &details},
		helper,
		func(runner *policyRunner) policyRunnerHelper { return newExecutePolicyHelper(runner, helper, params) },
	)
	for _, ticket := range params.Tickets {
		runner.tickets[policyParamKey(ticket.AuthName, ticket.PolicyRef)] = ticket
	}

	if err := runner.run(p.policy.Policy); err != nil {
		return nil, false, err
	}

	for _, ticket := range runner.tickets {
		tickets = append(tickets, ticket)
	}

	return tickets, details.AuthValueNeeded, nil
}

func computeBranchDigests(controller policyRunnerController, branches policyBranches, done func(tpm2.DigestList) error) error {
	currentDigest, err := controller.session().PolicyGetDigest()
	if err != nil {
		return err
	}

	currentPath := controller.currentPath()

	var digests tpm2.DigestList

	var tasks []taskFn
	for i, branch := range branches {
		i := i
		branch := branch
		task := func() error {
			digest := taggedHash{HashAlg: controller.session().HashAlg(), Digest: currentDigest}

			restoreSession := controller.setSession(newComputePolicySession(&digest))

			name := policyBranchPath(branch.Name)
			if len(name) == 0 {
				name = policyBranchPath(fmt.Sprintf("$[%d]", i))
			}
			restorePath := controller.setCurrentPath(currentPath.Concat(name))

			controller.pushTasks(func() error {
				restorePath()
				restoreSession()
				digests = append(digests, digest.Digest)
				if len(digests) != len(branches) {
					return nil
				}

				return done(digests)
			})
			controller.pushElements(branch.Policy)

			return nil
		}
		tasks = append(tasks, task)
	}
	controller.pushTasks(tasks...)

	return nil
}

type computePolicyHelper struct {
	controller policyRunnerController
	hasCpHash  *bool
}

func newComputePolicyHelper(runner *policyRunner, hasCpHash *bool) *computePolicyHelper {
	return &computePolicyHelper{
		controller: runner,
		hasCpHash:  hasCpHash,
	}
}

func (h *computePolicyHelper) cpHash(cpHash *policyCpHashElement) error {
	if h.hasCpHash != nil {
		*h.hasCpHash = true
	}
	digest, err := computeCpHash(h.controller.session().HashAlg(), cpHash.CommandCode, cpHash.Handles, cpHash.CpBytes)
	if err != nil {
		return fmt.Errorf("cannot compute cpHashA: %w", err)
	}
	cpHash.Digest = digest
	return nil
}

func (h *computePolicyHelper) nameHash(nameHash *policyNameHashElement) error {
	if h.hasCpHash != nil {
		*h.hasCpHash = true
	}
	digest, err := computeNameHash(h.controller.session().HashAlg(), nameHash.Handles)
	if err != nil {
		return fmt.Errorf("cannot compute nameHash: %w", err)
	}
	nameHash.Digest = digest
	return nil
}

func (h *computePolicyHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	if err := computeBranchDigests(h.controller, branches, func(digests tpm2.DigestList) error {
		for i, branch := range branches {
			found := false
			computedDigest := digests[i]
			for j, digest := range branch.PolicyDigests {
				if digest.HashAlg != h.controller.session().HashAlg() {
					continue
				}

				branch.PolicyDigests[j] = taggedHash{HashAlg: h.controller.session().HashAlg(), Digest: computedDigest}
				found = true
				break
			}
			if !found {
				branch.PolicyDigests = append(branch.PolicyDigests, taggedHash{HashAlg: h.controller.session().HashAlg(), Digest: computedDigest})
			}
		}

		h.controller.pushTasks(func() error {
			if err := complete(digests, 0); err != nil {
				return fmt.Errorf("cannot complete: %w", err)
			}
			return nil
		})
		return nil
	}); err != nil {
		return fmt.Errorf("cannot compute branch digests: %w", err)
	}

	return nil
}

func (h *computePolicyHelper) handleAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy, complete func(tpm2.Digest, *tpm2.TkVerified) error) error {
	h.controller.pushTasks(func() error {
		if err := complete(nil, nil); err != nil {
			return fmt.Errorf("cannot complete: %w", err)
		}
		return nil
	})
	return nil
}

func (p *Policy) computeForDigest(digest *taggedHash) error {
	var policy *policy
	if err := mu.CopyValue(&policy, p.policy); err != nil {
		return fmt.Errorf("cannot make temporary copy of policy: %w", err)
	}

	var hasCpHash bool

	runner := newPolicyRunner(
		newComputePolicySession(digest),
		new(mockResources),
		func(runner *policyRunner) policyRunnerHelper { return newComputePolicyHelper(runner, &hasCpHash) },
	)

	if err := runner.run(policy.Policy); err != nil {
		return err
	}

	addedDigest := false
	for i, d := range policy.PolicyDigests {
		if d.HashAlg == digest.HashAlg {
			policy.PolicyDigests[i] = *digest
			addedDigest = true
			break
		}
	}
	if !addedDigest {
		policy.PolicyDigests = append(policy.PolicyDigests, *digest)
	}

	if hasCpHash && len(policy.PolicyDigests) > 1 {
		return errors.New("policies that use TPM2_PolicyCpHash and TPM2_PolicyNameHash can't be computed for more than one digest algorithm")
	}

	p.policy = *policy
	return nil
}

// Compute computes the digest for this policy for the specified algorithm. This also
// updates stored digests within the policy, so the policy should be persisted after
// calling this. On success, it returns the computed digest.
//
// Policies that contain TPM2_PolicyCpHash or TPM2_PolicyNameHash assertions can only
// be computed for a single digest algorithm. An error will be returned if the policy has
// already been computed for another algorithm.
func (p *Policy) Compute(alg tpm2.HashAlgorithmId) (tpm2.Digest, error) {
	if !alg.IsValid() {
		return nil, errors.New("invalid algorithm")
	}

	for _, digest := range p.policy.PolicyDigests {
		if digest.HashAlg == alg {
			return digest.Digest, nil
		}
	}

	digest := taggedHash{HashAlg: alg, Digest: make(tpm2.Digest, alg.Size())}
	if err := p.computeForDigest(&digest); err != nil {
		return nil, err
	}

	return digest.Digest, nil
}

// Authorize signs this policy with the supplied signer so that it can be used as an
// authorized policy for a TPM2_PolicyAuthorize assertion with the supplied authKey and
// policyRef. Calling this updates the policy, so it should be persisted afterwards.
//
// TPM2_PolicyAuthorize expects the digest algorithm of the signature to match the name
// algorithm of the public key, so the name algorithm of authKey must match the algorithm
// supplied through the opts argument. This function also uses the name algorithm of
// authKey to select the policy digest to sign, so the name algorithm of authKey should
// match the name algorithm of the resource that this policy is associated with.
//
// This will compute the policy for the selected algorithm if it hasn't been computed
// already.
func (p *Policy) Authorize(rand io.Reader, authKey *tpm2.Public, policyRef tpm2.Nonce, signer crypto.Signer, opts crypto.SignerOpts) error {
	authName := authKey.Name()
	hashAlg := authName.Algorithm()
	if opts.HashFunc() != hashAlg.GetHash() {
		return errors.New("mismatched authKey name and opts")
	}

	approvedPolicy, err := p.Compute(hashAlg)
	if err != nil {
		return fmt.Errorf("cannot compute digest: %w", err)
	}

	policyAuth, err := SignPolicyAuthorization(rand, approvedPolicy, authKey, policyRef, signer, opts)
	if err != nil {
		return fmt.Errorf("cannot sign authorization: %w", err)
	}

	addedAuth := false
	for i, auth := range p.policy.PolicyAuthorizations {
		if bytes.Equal(auth.AuthKey.Name(), authName) && bytes.Equal(auth.PolicyRef, policyRef) {
			p.policy.PolicyAuthorizations[i] = *policyAuth
			addedAuth = true
			break
		}
	}
	if !addedAuth {
		p.policy.PolicyAuthorizations = append(p.policy.PolicyAuthorizations, *policyAuth)
	}

	return nil
}

type validatePolicyHelper struct {
	controller policyRunnerController
}

func newValidatePolicyHelper(runner *policyRunner) *validatePolicyHelper {
	return &validatePolicyHelper{controller: runner}
}

func (h *validatePolicyHelper) cpHash(cpHash *policyCpHashElement) error {
	digest, err := computeCpHash(h.controller.session().HashAlg(), cpHash.CommandCode, cpHash.Handles, cpHash.CpBytes)
	if err != nil {
		return fmt.Errorf("cannot compute cpHashA: %w", err)
	}
	if !bytes.Equal(digest, cpHash.Digest) {
		return fmt.Errorf("stored and computed cpHashA mismatch (computed: %x, stored: %x)", digest, cpHash.Digest)
	}
	return nil
}

func (h *validatePolicyHelper) nameHash(nameHash *policyNameHashElement) error {
	digest, err := computeNameHash(h.controller.session().HashAlg(), nameHash.Handles)
	if err != nil {
		return fmt.Errorf("cannot compute nameHash: %w", err)
	}
	if !bytes.Equal(digest, nameHash.Digest) {
		return fmt.Errorf("stored and computed nameHash mismatch (computed: %x, stored: %x)", digest, nameHash.Digest)
	}
	return nil
}

func (h *validatePolicyHelper) handleBranches(branches policyBranches, complete func(tpm2.DigestList, int) error) error {
	if err := computeBranchDigests(h.controller, branches, func(digests tpm2.DigestList) error {
		for i, branch := range branches {
			found := false
			computedDigest := digests[i]
			for _, digest := range branch.PolicyDigests {
				if digest.HashAlg != h.controller.session().HashAlg() {
					continue
				}
				if !bytes.Equal(digest.Digest, computedDigest) {
					return fmt.Errorf("stored and computed branch digest mismatch (computed: %x, stored: %x)", computedDigest, digest.Digest)
				}
				found = true
				break
			}
			if !found {
				return ErrMissingDigest
			}
		}

		h.controller.pushTasks(func() error {
			if err := complete(digests, 0); err != nil {
				return fmt.Errorf("cannot complete: %w", err)
			}
			return nil
		})
		return nil
	}); err != nil {
		return fmt.Errorf("cannot compute branch digests: %w", err)
	}

	return nil
}

func (h *validatePolicyHelper) handleAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy, complete func(tpm2.Digest, *tpm2.TkVerified) error) error {
	h.controller.pushTasks(func() error {
		if err := complete(nil, nil); err != nil {
			return fmt.Errorf("cannot complete: %w", err)
		}
		return nil
	})
	return nil
}

// Validate performs some checking of every element in the policy, and
// verifies that every branch is consistent with their stored digests. On
// success, it returns the digest correpsonding to this policy for the
// specified digest algorithm.
func (p *Policy) Validate(alg tpm2.HashAlgorithmId) (tpm2.Digest, error) {
	var expectedDigest tpm2.Digest
	for _, digest := range p.policy.PolicyDigests {
		if digest.HashAlg != alg {
			continue
		}

		expectedDigest = digest.Digest
		break
	}
	if expectedDigest == nil {
		return nil, ErrMissingDigest
	}

	digest := &taggedHash{HashAlg: alg, Digest: make(tpm2.Digest, alg.Size())}

	runner := newPolicyRunner(
		newComputePolicySession(digest),
		new(mockResources),
		func(runner *policyRunner) policyRunnerHelper { return newValidatePolicyHelper(runner) },
	)
	if err := runner.run(p.policy.Policy); err != nil {
		return nil, err
	}

	if !bytes.Equal(digest.Digest, expectedDigest) {
		return nil, fmt.Errorf("stored and computed policy digest mismatch (computed: %x, stored: %x)", digest.Digest, expectedDigest)
	}

	for _, auth := range p.policy.PolicyAuthorizations {
		if auth.AuthKey.Name().Algorithm() != alg {
			continue
		}

		ok, err := auth.Verify(digest.Digest)
		if err != nil {
			return nil, &PolicyAuthorizationError{AuthName: auth.AuthKey.Name(), PolicyRef: auth.PolicyRef, err: fmt.Errorf("cannot verify signature: %w", err)}
		}
		if !ok {
			return nil, &PolicyAuthorizationError{AuthName: auth.AuthKey.Name(), PolicyRef: auth.PolicyRef, err: errors.New("invalid signature")}
		}
	}

	return expectedDigest, nil
}

// Branches returns the path of every branch in this policy. A TPM2_PolicyAuthorize assertion
// is represented by a "â€¦" component in a path.
func (p *Policy) Branches() ([]string, error) {
	var result []string

	var currentPath policyBranchPath

	walker := newTreeWalker(
		newNullPolicySession(tpm2.HashAlgorithmSHA256),
		new(mockResources),
		func() (treeWalkerBeginBranchFn, treeWalkerEndBranchFn, error) {
			path := currentPath

			return func(name policyBranchPath) error {
				currentPath = path.Concat(name)
				return nil
			}, nil, nil
		},
		func() error {
			result = append(result, string(currentPath))
			return nil
		},
	)

	if err := walker.run(p.policy.Policy); err != nil {
		return nil, err
	}

	return result, nil
}

// PolicyNVDetails contains the properties of a TPM2_PolicyNV assertion.
type PolicyNVDetails struct {
	Auth      tpm2.Handle
	Index     NVIndex
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

// PolicyAuthorizationDetails contains the properties of a TPM2_PolicySecret,
// TPM2_PolicySigned or TPM2_PolicyAuthorize assertion.
type PolicyAuthorizationDetails struct {
	AuthName  tpm2.Name
	PolicyRef tpm2.Nonce
}

// PolicyCounterTimerDetails contains the properties of a TPM2_PolicyCounterTimer
// assertion.
type PolicyCounterTimerDetails struct {
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

// PolicyPCRDetails contains the properties of a TPM2_PolicyPCR assertion.
type PolicyPCRDetails struct {
	PCRDigest tpm2.Digest
	PCRs      tpm2.PCRSelectionList
}

// PolicyBranchDetails contains the properties of a single policy branch.
type PolicyBranchDetails struct {
	NV                []PolicyNVDetails            // TPM2_PolicyNV assertions
	Secret            []PolicyAuthorizationDetails // TPM2_PolicySecret assertions
	Signed            []PolicyAuthorizationDetails // TPM2_PolicySigned assertions
	Authorize         []PolicyAuthorizationDetails // TPM2_PolicyAuthorize assertions
	AuthValueNeeded   bool                         // The branch contains a TPM2_PolicyAuthValue or TPM2_PolicyPassword assertion
	policyCommandCode tpm2.CommandCodeList
	CounterTimer      []PolicyCounterTimerDetails // TPM2_PolicyCounterTimer assertions
	policyCpHash      tpm2.DigestList
	policyNameHash    tpm2.DigestList
	PCR               []PolicyPCRDetails // TPM2_PolicyPCR assertions
	policyNvWritten   []bool
}

// IsValid indicates whether the corresponding policy branch is valid.
func (r *PolicyBranchDetails) IsValid() bool {
	if len(r.policyCommandCode) > 1 {
		for _, code := range r.policyCommandCode[1:] {
			if code != r.policyCommandCode[0] {
				return false
			}
		}
	}

	cpHashNum := 0
	if len(r.policyCpHash) > 0 {
		if len(r.policyCpHash) > 1 {
			for _, cpHash := range r.policyCpHash[1:] {
				if !bytes.Equal(cpHash, r.policyCpHash[0]) {
					return false
				}
			}
		}
		cpHashNum += 1
	}
	if len(r.policyNameHash) > 0 {
		if len(r.policyNameHash) > 1 {
			return false
		}
		cpHashNum += 1
	}
	if cpHashNum > 1 {
		return false
	}
	if len(r.policyNvWritten) > 1 {
		for _, nvWritten := range r.policyNvWritten[1:] {
			if nvWritten != r.policyNvWritten[0] {
				return false
			}
		}
	}

	return true
}

// The command code associated with a branch if set, either set by the TPM2_PolicyCommandCode
// or TPM2_PolicyDuplicationSelect assertion.
func (r *PolicyBranchDetails) CommandCode() (code tpm2.CommandCode, set bool) {
	if len(r.policyCommandCode) == 0 {
		return 0, false
	}
	return r.policyCommandCode[0], true
}

// The cpHash associated with a branch if set, either set by the TPM2_PolicyCpHash,
// TPM2_PolicySecret, or TPM2_PolicySigned assertions.
func (r *PolicyBranchDetails) CpHash() (cpHashA tpm2.Digest, set bool) {
	if len(r.policyCpHash) == 0 {
		return nil, false
	}
	return r.policyCpHash[0], true
}

// The nameHash associated with a branch if set, either set by the TPM2_PolicyNameHash
// or TPM2_PolicyDuplicationSelect assertion.
func (r *PolicyBranchDetails) NameHash() (nameHash tpm2.Digest, set bool) {
	if len(r.policyNameHash) == 0 {
		return nil, false
	}
	return r.policyNameHash[0], true
}

// The nvWrittenSet value associated with a branch if set.
func (r *PolicyBranchDetails) NvWritten() (nvWrittenSet bool, set bool) {
	if len(r.policyNvWritten) == 0 {
		return false, false
	}
	return r.policyNvWritten[0], true
}

// Details returns details of all branches with the supplied path prefix, for
// the specified algorithm.
func (p *Policy) Details(alg tpm2.HashAlgorithmId, path string) (map[string]PolicyBranchDetails, error) {
	result := make(map[string]PolicyBranchDetails)

	var (
		remainingPath  = policyBranchPath(path)
		currentDetails PolicyBranchDetails
		currentPath    policyBranchPath
		consumeGreedy  bool
	)

	var walker *treeWalker
	walker = newTreeWalker(
		&observingPolicySession{session: newNullPolicySession(alg), details: &currentDetails},
		new(mockResources),
		func() (treeWalkerBeginBranchFn, treeWalkerEndBranchFn, error) {
			details := currentDetails
			path := currentPath

			var next policyBranchPath
			thisNodeConsumingGreedy := false
			if consumeGreedy {
				next = "*"
			} else {
				next, remainingPath = remainingPath.PopNextComponent()
				if next == "**" {
					consumeGreedy = true
					thisNodeConsumingGreedy = true
				}
			}

			explicitlyHandledNode := false

			beginBranchFn := func(name policyBranchPath) error {
				if explicitlyHandledNode {
					return errTreeWalkerSkipBranch
				}
				switch {
				case len(next) == 0 || next[0] == '*':
					// ok
				case next == name:
					// ok
					explicitlyHandledNode = true
				default:
					return errTreeWalkerSkipBranch
				}

				currentPath = path.Concat(name)
				currentDetails = details
				walker.runner.setSession(&observingPolicySession{
					session: newNullPolicySession(alg),
					details: &currentDetails,
				})
				return nil
			}

			endBranchFn := func() error {
				if thisNodeConsumingGreedy {
					consumeGreedy = false
				}
				return nil
			}

			return beginBranchFn, endBranchFn, nil
		},
		func() error {
			result[string(currentPath)] = currentDetails
			return nil
		},
	)

	if err := walker.run(p.policy.Policy); err != nil {
		return nil, err
	}

	return result, nil
}
